/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: coinbase/staking/v1alpha1/api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/api/annotations";
import * as dependency_2 from "./../../../google/api/client";
import * as dependency_3 from "./../../../protoc-gen-openapiv2/options/annotations";
import * as dependency_4 from "./protocol";
import * as dependency_5 from "./network";
import * as dependency_6 from "./action";
import * as dependency_7 from "./validator";
import * as dependency_8 from "./workflow";
import * as dependency_9 from "./staking_context";
import * as grpc_1 from "@grpc/grpc-js";
export namespace coinbase.staking.v1alpha1 {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedStakingServiceService {
        static definition = {
            ListProtocols: {
                path: "/coinbase.staking.v1alpha1.StakingService/ListProtocols",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_4.coinbase.staking.v1alpha1.ListProtocolsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.coinbase.staking.v1alpha1.ListProtocolsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.coinbase.staking.v1alpha1.ListProtocolsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.coinbase.staking.v1alpha1.ListProtocolsResponse.deserialize(new Uint8Array(bytes))
            },
            ListNetworks: {
                path: "/coinbase.staking.v1alpha1.StakingService/ListNetworks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.coinbase.staking.v1alpha1.ListNetworksRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.coinbase.staking.v1alpha1.ListNetworksRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_5.coinbase.staking.v1alpha1.ListNetworksResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_5.coinbase.staking.v1alpha1.ListNetworksResponse.deserialize(new Uint8Array(bytes))
            },
            ListValidators: {
                path: "/coinbase.staking.v1alpha1.StakingService/ListValidators",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.coinbase.staking.v1alpha1.ListValidatorsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.coinbase.staking.v1alpha1.ListValidatorsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_7.coinbase.staking.v1alpha1.ListValidatorsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_7.coinbase.staking.v1alpha1.ListValidatorsResponse.deserialize(new Uint8Array(bytes))
            },
            ListActions: {
                path: "/coinbase.staking.v1alpha1.StakingService/ListActions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.coinbase.staking.v1alpha1.ListActionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.coinbase.staking.v1alpha1.ListActionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.coinbase.staking.v1alpha1.ListActionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.coinbase.staking.v1alpha1.ListActionsResponse.deserialize(new Uint8Array(bytes))
            },
            CreateWorkflow: {
                path: "/coinbase.staking.v1alpha1.StakingService/CreateWorkflow",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.coinbase.staking.v1alpha1.CreateWorkflowRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.CreateWorkflowRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.coinbase.staking.v1alpha1.Workflow) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.Workflow.deserialize(new Uint8Array(bytes))
            },
            GetWorkflow: {
                path: "/coinbase.staking.v1alpha1.StakingService/GetWorkflow",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.coinbase.staking.v1alpha1.GetWorkflowRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.GetWorkflowRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.coinbase.staking.v1alpha1.Workflow) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.Workflow.deserialize(new Uint8Array(bytes))
            },
            ListWorkflows: {
                path: "/coinbase.staking.v1alpha1.StakingService/ListWorkflows",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.coinbase.staking.v1alpha1.ListWorkflowsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.ListWorkflowsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.coinbase.staking.v1alpha1.ListWorkflowsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.ListWorkflowsResponse.deserialize(new Uint8Array(bytes))
            },
            PerformWorkflowStep: {
                path: "/coinbase.staking.v1alpha1.StakingService/PerformWorkflowStep",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.coinbase.staking.v1alpha1.PerformWorkflowStepRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.PerformWorkflowStepRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.coinbase.staking.v1alpha1.Workflow) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.Workflow.deserialize(new Uint8Array(bytes))
            },
            RefreshWorkflowStep: {
                path: "/coinbase.staking.v1alpha1.StakingService/RefreshWorkflowStep",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.coinbase.staking.v1alpha1.RefreshWorkflowStepRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.RefreshWorkflowStepRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.coinbase.staking.v1alpha1.Workflow) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.coinbase.staking.v1alpha1.Workflow.deserialize(new Uint8Array(bytes))
            },
            ViewStakingContext: {
                path: "/coinbase.staking.v1alpha1.StakingService/ViewStakingContext",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.coinbase.staking.v1alpha1.ViewStakingContextRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.coinbase.staking.v1alpha1.ViewStakingContextRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_9.coinbase.staking.v1alpha1.ViewStakingContextResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_9.coinbase.staking.v1alpha1.ViewStakingContextResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ListProtocols(call: grpc_1.ServerUnaryCall<dependency_4.coinbase.staking.v1alpha1.ListProtocolsRequest, dependency_4.coinbase.staking.v1alpha1.ListProtocolsResponse>, callback: grpc_1.sendUnaryData<dependency_4.coinbase.staking.v1alpha1.ListProtocolsResponse>): void;
        abstract ListNetworks(call: grpc_1.ServerUnaryCall<dependency_5.coinbase.staking.v1alpha1.ListNetworksRequest, dependency_5.coinbase.staking.v1alpha1.ListNetworksResponse>, callback: grpc_1.sendUnaryData<dependency_5.coinbase.staking.v1alpha1.ListNetworksResponse>): void;
        abstract ListValidators(call: grpc_1.ServerUnaryCall<dependency_7.coinbase.staking.v1alpha1.ListValidatorsRequest, dependency_7.coinbase.staking.v1alpha1.ListValidatorsResponse>, callback: grpc_1.sendUnaryData<dependency_7.coinbase.staking.v1alpha1.ListValidatorsResponse>): void;
        abstract ListActions(call: grpc_1.ServerUnaryCall<dependency_6.coinbase.staking.v1alpha1.ListActionsRequest, dependency_6.coinbase.staking.v1alpha1.ListActionsResponse>, callback: grpc_1.sendUnaryData<dependency_6.coinbase.staking.v1alpha1.ListActionsResponse>): void;
        abstract CreateWorkflow(call: grpc_1.ServerUnaryCall<dependency_8.coinbase.staking.v1alpha1.CreateWorkflowRequest, dependency_8.coinbase.staking.v1alpha1.Workflow>, callback: grpc_1.sendUnaryData<dependency_8.coinbase.staking.v1alpha1.Workflow>): void;
        abstract GetWorkflow(call: grpc_1.ServerUnaryCall<dependency_8.coinbase.staking.v1alpha1.GetWorkflowRequest, dependency_8.coinbase.staking.v1alpha1.Workflow>, callback: grpc_1.sendUnaryData<dependency_8.coinbase.staking.v1alpha1.Workflow>): void;
        abstract ListWorkflows(call: grpc_1.ServerUnaryCall<dependency_8.coinbase.staking.v1alpha1.ListWorkflowsRequest, dependency_8.coinbase.staking.v1alpha1.ListWorkflowsResponse>, callback: grpc_1.sendUnaryData<dependency_8.coinbase.staking.v1alpha1.ListWorkflowsResponse>): void;
        abstract PerformWorkflowStep(call: grpc_1.ServerUnaryCall<dependency_8.coinbase.staking.v1alpha1.PerformWorkflowStepRequest, dependency_8.coinbase.staking.v1alpha1.Workflow>, callback: grpc_1.sendUnaryData<dependency_8.coinbase.staking.v1alpha1.Workflow>): void;
        abstract RefreshWorkflowStep(call: grpc_1.ServerUnaryCall<dependency_8.coinbase.staking.v1alpha1.RefreshWorkflowStepRequest, dependency_8.coinbase.staking.v1alpha1.Workflow>, callback: grpc_1.sendUnaryData<dependency_8.coinbase.staking.v1alpha1.Workflow>): void;
        abstract ViewStakingContext(call: grpc_1.ServerUnaryCall<dependency_9.coinbase.staking.v1alpha1.ViewStakingContextRequest, dependency_9.coinbase.staking.v1alpha1.ViewStakingContextResponse>, callback: grpc_1.sendUnaryData<dependency_9.coinbase.staking.v1alpha1.ViewStakingContextResponse>): void;
    }
    export class StakingServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedStakingServiceService.definition, "StakingService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ListProtocols: GrpcUnaryServiceInterface<dependency_4.coinbase.staking.v1alpha1.ListProtocolsRequest, dependency_4.coinbase.staking.v1alpha1.ListProtocolsResponse> = (message: dependency_4.coinbase.staking.v1alpha1.ListProtocolsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.coinbase.staking.v1alpha1.ListProtocolsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.coinbase.staking.v1alpha1.ListProtocolsResponse>, callback?: grpc_1.requestCallback<dependency_4.coinbase.staking.v1alpha1.ListProtocolsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListProtocols(message, metadata, options, callback);
        };
        ListNetworks: GrpcUnaryServiceInterface<dependency_5.coinbase.staking.v1alpha1.ListNetworksRequest, dependency_5.coinbase.staking.v1alpha1.ListNetworksResponse> = (message: dependency_5.coinbase.staking.v1alpha1.ListNetworksRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.coinbase.staking.v1alpha1.ListNetworksResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.coinbase.staking.v1alpha1.ListNetworksResponse>, callback?: grpc_1.requestCallback<dependency_5.coinbase.staking.v1alpha1.ListNetworksResponse>): grpc_1.ClientUnaryCall => {
            return super.ListNetworks(message, metadata, options, callback);
        };
        ListValidators: GrpcUnaryServiceInterface<dependency_7.coinbase.staking.v1alpha1.ListValidatorsRequest, dependency_7.coinbase.staking.v1alpha1.ListValidatorsResponse> = (message: dependency_7.coinbase.staking.v1alpha1.ListValidatorsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_7.coinbase.staking.v1alpha1.ListValidatorsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_7.coinbase.staking.v1alpha1.ListValidatorsResponse>, callback?: grpc_1.requestCallback<dependency_7.coinbase.staking.v1alpha1.ListValidatorsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListValidators(message, metadata, options, callback);
        };
        ListActions: GrpcUnaryServiceInterface<dependency_6.coinbase.staking.v1alpha1.ListActionsRequest, dependency_6.coinbase.staking.v1alpha1.ListActionsResponse> = (message: dependency_6.coinbase.staking.v1alpha1.ListActionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.coinbase.staking.v1alpha1.ListActionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.coinbase.staking.v1alpha1.ListActionsResponse>, callback?: grpc_1.requestCallback<dependency_6.coinbase.staking.v1alpha1.ListActionsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListActions(message, metadata, options, callback);
        };
        CreateWorkflow: GrpcUnaryServiceInterface<dependency_8.coinbase.staking.v1alpha1.CreateWorkflowRequest, dependency_8.coinbase.staking.v1alpha1.Workflow> = (message: dependency_8.coinbase.staking.v1alpha1.CreateWorkflowRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>, callback?: grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>): grpc_1.ClientUnaryCall => {
            return super.CreateWorkflow(message, metadata, options, callback);
        };
        GetWorkflow: GrpcUnaryServiceInterface<dependency_8.coinbase.staking.v1alpha1.GetWorkflowRequest, dependency_8.coinbase.staking.v1alpha1.Workflow> = (message: dependency_8.coinbase.staking.v1alpha1.GetWorkflowRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>, callback?: grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>): grpc_1.ClientUnaryCall => {
            return super.GetWorkflow(message, metadata, options, callback);
        };
        ListWorkflows: GrpcUnaryServiceInterface<dependency_8.coinbase.staking.v1alpha1.ListWorkflowsRequest, dependency_8.coinbase.staking.v1alpha1.ListWorkflowsResponse> = (message: dependency_8.coinbase.staking.v1alpha1.ListWorkflowsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.ListWorkflowsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.ListWorkflowsResponse>, callback?: grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.ListWorkflowsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListWorkflows(message, metadata, options, callback);
        };
        PerformWorkflowStep: GrpcUnaryServiceInterface<dependency_8.coinbase.staking.v1alpha1.PerformWorkflowStepRequest, dependency_8.coinbase.staking.v1alpha1.Workflow> = (message: dependency_8.coinbase.staking.v1alpha1.PerformWorkflowStepRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>, callback?: grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>): grpc_1.ClientUnaryCall => {
            return super.PerformWorkflowStep(message, metadata, options, callback);
        };
        RefreshWorkflowStep: GrpcUnaryServiceInterface<dependency_8.coinbase.staking.v1alpha1.RefreshWorkflowStepRequest, dependency_8.coinbase.staking.v1alpha1.Workflow> = (message: dependency_8.coinbase.staking.v1alpha1.RefreshWorkflowStepRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>, callback?: grpc_1.requestCallback<dependency_8.coinbase.staking.v1alpha1.Workflow>): grpc_1.ClientUnaryCall => {
            return super.RefreshWorkflowStep(message, metadata, options, callback);
        };
        ViewStakingContext: GrpcUnaryServiceInterface<dependency_9.coinbase.staking.v1alpha1.ViewStakingContextRequest, dependency_9.coinbase.staking.v1alpha1.ViewStakingContextResponse> = (message: dependency_9.coinbase.staking.v1alpha1.ViewStakingContextRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_9.coinbase.staking.v1alpha1.ViewStakingContextResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_9.coinbase.staking.v1alpha1.ViewStakingContextResponse>, callback?: grpc_1.requestCallback<dependency_9.coinbase.staking.v1alpha1.ViewStakingContextResponse>): grpc_1.ClientUnaryCall => {
            return super.ViewStakingContext(message, metadata, options, callback);
        };
    }
}
