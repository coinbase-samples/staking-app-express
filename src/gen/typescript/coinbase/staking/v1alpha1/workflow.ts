/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: coinbase/staking/v1alpha1/workflow.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ethereum_kiln";
import * as dependency_2 from "./polygon";
import * as dependency_3 from "./solana";
import * as dependency_4 from "./../../../google/api/field_behavior";
import * as dependency_5 from "./../../../google/api/resource";
import * as dependency_6 from "./../../../google/protobuf/timestamp";
import * as dependency_7 from "./../../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace coinbase.staking.v1alpha1 {
    export class TxStepOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unsigned_tx?: string;
            signed_tx?: string;
            tx_hash?: string;
            state?: TxStepOutput.State;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unsigned_tx" in data && data.unsigned_tx != undefined) {
                    this.unsigned_tx = data.unsigned_tx;
                }
                if ("signed_tx" in data && data.signed_tx != undefined) {
                    this.signed_tx = data.signed_tx;
                }
                if ("tx_hash" in data && data.tx_hash != undefined) {
                    this.tx_hash = data.tx_hash;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get unsigned_tx() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set unsigned_tx(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signed_tx() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set signed_tx(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tx_hash() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tx_hash(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 4, TxStepOutput.State.STATE_UNSPECIFIED) as TxStepOutput.State;
        }
        set state(value: TxStepOutput.State) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            unsigned_tx?: string;
            signed_tx?: string;
            tx_hash?: string;
            state?: TxStepOutput.State;
        }): TxStepOutput {
            const message = new TxStepOutput({});
            if (data.unsigned_tx != null) {
                message.unsigned_tx = data.unsigned_tx;
            }
            if (data.signed_tx != null) {
                message.signed_tx = data.signed_tx;
            }
            if (data.tx_hash != null) {
                message.tx_hash = data.tx_hash;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                unsigned_tx?: string;
                signed_tx?: string;
                tx_hash?: string;
                state?: TxStepOutput.State;
            } = {};
            if (this.unsigned_tx != null) {
                data.unsigned_tx = this.unsigned_tx;
            }
            if (this.signed_tx != null) {
                data.signed_tx = this.signed_tx;
            }
            if (this.tx_hash != null) {
                data.tx_hash = this.tx_hash;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.unsigned_tx.length)
                writer.writeString(1, this.unsigned_tx);
            if (this.signed_tx.length)
                writer.writeString(2, this.signed_tx);
            if (this.tx_hash.length)
                writer.writeString(3, this.tx_hash);
            if (this.state != TxStepOutput.State.STATE_UNSPECIFIED)
                writer.writeEnum(4, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TxStepOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxStepOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.unsigned_tx = reader.readString();
                        break;
                    case 2:
                        message.signed_tx = reader.readString();
                        break;
                    case 3:
                        message.tx_hash = reader.readString();
                        break;
                    case 4:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TxStepOutput {
            return TxStepOutput.deserialize(bytes);
        }
    }
    export namespace TxStepOutput {
        export enum State {
            STATE_UNSPECIFIED = 0,
            STATE_NOT_CONSTRUCTED = 1,
            STATE_CONSTRUCTED = 2,
            STATE_PENDING_SIGNING = 3,
            STATE_SIGNED = 4,
            STATE_BROADCASTING = 5,
            STATE_CONFIRMING = 6,
            STATE_CONFIRMED = 7,
            STATE_FINALIZED = 8,
            STATE_FAILED = 9,
            STATE_SUCCESS = 10,
            STATE_CANCELING = 11,
            STATE_CANCELED = 12,
            STATE_CANCEL_FAILED = 13,
            STATE_FAILED_REFRESHABLE = 14,
            STATE_REFRESHING = 15
        }
    }
    export class WaitStepOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start?: number;
            current?: number;
            target?: number;
            unit?: WaitStepOutput.WaitUnit;
            state?: WaitStepOutput.State;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("current" in data && data.current != undefined) {
                    this.current = data.current;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("unit" in data && data.unit != undefined) {
                    this.unit = data.unit;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get start() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get current() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set current(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get unit() {
            return pb_1.Message.getFieldWithDefault(this, 4, WaitStepOutput.WaitUnit.WAIT_UNIT_UNSPECIFIED) as WaitStepOutput.WaitUnit;
        }
        set unit(value: WaitStepOutput.WaitUnit) {
            pb_1.Message.setField(this, 4, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 5, WaitStepOutput.State.STATE_UNSPECIFIED) as WaitStepOutput.State;
        }
        set state(value: WaitStepOutput.State) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            start?: number;
            current?: number;
            target?: number;
            unit?: WaitStepOutput.WaitUnit;
            state?: WaitStepOutput.State;
        }): WaitStepOutput {
            const message = new WaitStepOutput({});
            if (data.start != null) {
                message.start = data.start;
            }
            if (data.current != null) {
                message.current = data.current;
            }
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.unit != null) {
                message.unit = data.unit;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                start?: number;
                current?: number;
                target?: number;
                unit?: WaitStepOutput.WaitUnit;
                state?: WaitStepOutput.State;
            } = {};
            if (this.start != null) {
                data.start = this.start;
            }
            if (this.current != null) {
                data.current = this.current;
            }
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.unit != null) {
                data.unit = this.unit;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start != 0)
                writer.writeInt64(1, this.start);
            if (this.current != 0)
                writer.writeInt64(2, this.current);
            if (this.target != 0)
                writer.writeInt64(3, this.target);
            if (this.unit != WaitStepOutput.WaitUnit.WAIT_UNIT_UNSPECIFIED)
                writer.writeEnum(4, this.unit);
            if (this.state != WaitStepOutput.State.STATE_UNSPECIFIED)
                writer.writeEnum(5, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WaitStepOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WaitStepOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start = reader.readInt64();
                        break;
                    case 2:
                        message.current = reader.readInt64();
                        break;
                    case 3:
                        message.target = reader.readInt64();
                        break;
                    case 4:
                        message.unit = reader.readEnum();
                        break;
                    case 5:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WaitStepOutput {
            return WaitStepOutput.deserialize(bytes);
        }
    }
    export namespace WaitStepOutput {
        export enum WaitUnit {
            WAIT_UNIT_UNSPECIFIED = 0,
            WAIT_UNIT_SECONDS = 1,
            WAIT_UNIT_BLOCKS = 2,
            WAIT_UNIT_EPOCHS = 3,
            WAIT_UNIT_CHECKPOINTS = 4
        }
        export enum State {
            STATE_UNSPECIFIED = 0,
            STATE_NOT_STARTED = 1,
            STATE_IN_PROGRESS = 2,
            STATE_COMPLETED = 3
        }
    }
    export class WorkflowStep extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            name?: string;
        } & (({
            tx_step_output?: TxStepOutput;
            wait_step_output?: never;
        } | {
            tx_step_output?: never;
            wait_step_output?: WaitStepOutput;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("tx_step_output" in data && data.tx_step_output != undefined) {
                    this.tx_step_output = data.tx_step_output;
                }
                if ("wait_step_output" in data && data.wait_step_output != undefined) {
                    this.wait_step_output = data.wait_step_output;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_step_output() {
            return pb_1.Message.getWrapperField(this, TxStepOutput, 2) as TxStepOutput;
        }
        set tx_step_output(value: TxStepOutput) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_tx_step_output() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get wait_step_output() {
            return pb_1.Message.getWrapperField(this, WaitStepOutput, 3) as WaitStepOutput;
        }
        set wait_step_output(value: WaitStepOutput) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_wait_step_output() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get output() {
            const cases: {
                [index: number]: "none" | "tx_step_output" | "wait_step_output";
            } = {
                0: "none",
                2: "tx_step_output",
                3: "wait_step_output"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            name?: string;
            tx_step_output?: ReturnType<typeof TxStepOutput.prototype.toObject>;
            wait_step_output?: ReturnType<typeof WaitStepOutput.prototype.toObject>;
        }): WorkflowStep {
            const message = new WorkflowStep({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.tx_step_output != null) {
                message.tx_step_output = TxStepOutput.fromObject(data.tx_step_output);
            }
            if (data.wait_step_output != null) {
                message.wait_step_output = WaitStepOutput.fromObject(data.wait_step_output);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                tx_step_output?: ReturnType<typeof TxStepOutput.prototype.toObject>;
                wait_step_output?: ReturnType<typeof WaitStepOutput.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.tx_step_output != null) {
                data.tx_step_output = this.tx_step_output.toObject();
            }
            if (this.wait_step_output != null) {
                data.wait_step_output = this.wait_step_output.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_tx_step_output)
                writer.writeMessage(2, this.tx_step_output, () => this.tx_step_output.serialize(writer));
            if (this.has_wait_step_output)
                writer.writeMessage(3, this.wait_step_output, () => this.wait_step_output.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkflowStep {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkflowStep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.tx_step_output, () => message.tx_step_output = TxStepOutput.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.wait_step_output, () => message.wait_step_output = WaitStepOutput.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkflowStep {
            return WorkflowStep.deserialize(bytes);
        }
    }
    export class Workflow extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 9, 10]];
        constructor(data?: any[] | ({
            name?: string;
            action?: string;
            state?: Workflow.State;
            current_step_id?: number;
            steps?: WorkflowStep[];
            create_time?: dependency_6.google.protobuf.Timestamp;
            update_time?: dependency_6.google.protobuf.Timestamp;
        } & (({
            polygon_staking_parameters?: dependency_2.coinbase.staking.v1alpha1.PolygonStakingParameters;
            solana_staking_parameters?: never;
            ethereum_kiln_staking_parameters?: never;
        } | {
            polygon_staking_parameters?: never;
            solana_staking_parameters?: dependency_3.coinbase.staking.v1alpha1.SolanaStakingParameters;
            ethereum_kiln_staking_parameters?: never;
        } | {
            polygon_staking_parameters?: never;
            solana_staking_parameters?: never;
            ethereum_kiln_staking_parameters?: dependency_1.coinbase.staking.v1alpha1.EthereumKilnStakingParameters;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("polygon_staking_parameters" in data && data.polygon_staking_parameters != undefined) {
                    this.polygon_staking_parameters = data.polygon_staking_parameters;
                }
                if ("solana_staking_parameters" in data && data.solana_staking_parameters != undefined) {
                    this.solana_staking_parameters = data.solana_staking_parameters;
                }
                if ("ethereum_kiln_staking_parameters" in data && data.ethereum_kiln_staking_parameters != undefined) {
                    this.ethereum_kiln_staking_parameters = data.ethereum_kiln_staking_parameters;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("current_step_id" in data && data.current_step_id != undefined) {
                    this.current_step_id = data.current_step_id;
                }
                if ("steps" in data && data.steps != undefined) {
                    this.steps = data.steps;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("update_time" in data && data.update_time != undefined) {
                    this.update_time = data.update_time;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set action(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get polygon_staking_parameters() {
            return pb_1.Message.getWrapperField(this, dependency_2.coinbase.staking.v1alpha1.PolygonStakingParameters, 3) as dependency_2.coinbase.staking.v1alpha1.PolygonStakingParameters;
        }
        set polygon_staking_parameters(value: dependency_2.coinbase.staking.v1alpha1.PolygonStakingParameters) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_polygon_staking_parameters() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get solana_staking_parameters() {
            return pb_1.Message.getWrapperField(this, dependency_3.coinbase.staking.v1alpha1.SolanaStakingParameters, 9) as dependency_3.coinbase.staking.v1alpha1.SolanaStakingParameters;
        }
        set solana_staking_parameters(value: dependency_3.coinbase.staking.v1alpha1.SolanaStakingParameters) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_solana_staking_parameters() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get ethereum_kiln_staking_parameters() {
            return pb_1.Message.getWrapperField(this, dependency_1.coinbase.staking.v1alpha1.EthereumKilnStakingParameters, 10) as dependency_1.coinbase.staking.v1alpha1.EthereumKilnStakingParameters;
        }
        set ethereum_kiln_staking_parameters(value: dependency_1.coinbase.staking.v1alpha1.EthereumKilnStakingParameters) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_ethereum_kiln_staking_parameters() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 4, Workflow.State.STATE_UNSPECIFIED) as Workflow.State;
        }
        set state(value: Workflow.State) {
            pb_1.Message.setField(this, 4, value);
        }
        get current_step_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set current_step_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get steps() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkflowStep, 6) as WorkflowStep[];
        }
        set steps(value: WorkflowStep[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get create_time() {
            return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 7) as dependency_6.google.protobuf.Timestamp;
        }
        set create_time(value: dependency_6.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_create_time() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get update_time() {
            return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 8) as dependency_6.google.protobuf.Timestamp;
        }
        set update_time(value: dependency_6.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_update_time() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get staking_parameters() {
            const cases: {
                [index: number]: "none" | "polygon_staking_parameters" | "solana_staking_parameters" | "ethereum_kiln_staking_parameters";
            } = {
                0: "none",
                3: "polygon_staking_parameters",
                9: "solana_staking_parameters",
                10: "ethereum_kiln_staking_parameters"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 9, 10])];
        }
        static fromObject(data: {
            name?: string;
            action?: string;
            polygon_staking_parameters?: ReturnType<typeof dependency_2.coinbase.staking.v1alpha1.PolygonStakingParameters.prototype.toObject>;
            solana_staking_parameters?: ReturnType<typeof dependency_3.coinbase.staking.v1alpha1.SolanaStakingParameters.prototype.toObject>;
            ethereum_kiln_staking_parameters?: ReturnType<typeof dependency_1.coinbase.staking.v1alpha1.EthereumKilnStakingParameters.prototype.toObject>;
            state?: Workflow.State;
            current_step_id?: number;
            steps?: ReturnType<typeof WorkflowStep.prototype.toObject>[];
            create_time?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
            update_time?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        }): Workflow {
            const message = new Workflow({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            if (data.polygon_staking_parameters != null) {
                message.polygon_staking_parameters = dependency_2.coinbase.staking.v1alpha1.PolygonStakingParameters.fromObject(data.polygon_staking_parameters);
            }
            if (data.solana_staking_parameters != null) {
                message.solana_staking_parameters = dependency_3.coinbase.staking.v1alpha1.SolanaStakingParameters.fromObject(data.solana_staking_parameters);
            }
            if (data.ethereum_kiln_staking_parameters != null) {
                message.ethereum_kiln_staking_parameters = dependency_1.coinbase.staking.v1alpha1.EthereumKilnStakingParameters.fromObject(data.ethereum_kiln_staking_parameters);
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.current_step_id != null) {
                message.current_step_id = data.current_step_id;
            }
            if (data.steps != null) {
                message.steps = data.steps.map(item => WorkflowStep.fromObject(item));
            }
            if (data.create_time != null) {
                message.create_time = dependency_6.google.protobuf.Timestamp.fromObject(data.create_time);
            }
            if (data.update_time != null) {
                message.update_time = dependency_6.google.protobuf.Timestamp.fromObject(data.update_time);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                action?: string;
                polygon_staking_parameters?: ReturnType<typeof dependency_2.coinbase.staking.v1alpha1.PolygonStakingParameters.prototype.toObject>;
                solana_staking_parameters?: ReturnType<typeof dependency_3.coinbase.staking.v1alpha1.SolanaStakingParameters.prototype.toObject>;
                ethereum_kiln_staking_parameters?: ReturnType<typeof dependency_1.coinbase.staking.v1alpha1.EthereumKilnStakingParameters.prototype.toObject>;
                state?: Workflow.State;
                current_step_id?: number;
                steps?: ReturnType<typeof WorkflowStep.prototype.toObject>[];
                create_time?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
                update_time?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            if (this.polygon_staking_parameters != null) {
                data.polygon_staking_parameters = this.polygon_staking_parameters.toObject();
            }
            if (this.solana_staking_parameters != null) {
                data.solana_staking_parameters = this.solana_staking_parameters.toObject();
            }
            if (this.ethereum_kiln_staking_parameters != null) {
                data.ethereum_kiln_staking_parameters = this.ethereum_kiln_staking_parameters.toObject();
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.current_step_id != null) {
                data.current_step_id = this.current_step_id;
            }
            if (this.steps != null) {
                data.steps = this.steps.map((item: WorkflowStep) => item.toObject());
            }
            if (this.create_time != null) {
                data.create_time = this.create_time.toObject();
            }
            if (this.update_time != null) {
                data.update_time = this.update_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.action.length)
                writer.writeString(2, this.action);
            if (this.has_polygon_staking_parameters)
                writer.writeMessage(3, this.polygon_staking_parameters, () => this.polygon_staking_parameters.serialize(writer));
            if (this.has_solana_staking_parameters)
                writer.writeMessage(9, this.solana_staking_parameters, () => this.solana_staking_parameters.serialize(writer));
            if (this.has_ethereum_kiln_staking_parameters)
                writer.writeMessage(10, this.ethereum_kiln_staking_parameters, () => this.ethereum_kiln_staking_parameters.serialize(writer));
            if (this.state != Workflow.State.STATE_UNSPECIFIED)
                writer.writeEnum(4, this.state);
            if (this.current_step_id != 0)
                writer.writeInt32(5, this.current_step_id);
            if (this.steps.length)
                writer.writeRepeatedMessage(6, this.steps, (item: WorkflowStep) => item.serialize(writer));
            if (this.has_create_time)
                writer.writeMessage(7, this.create_time, () => this.create_time.serialize(writer));
            if (this.has_update_time)
                writer.writeMessage(8, this.update_time, () => this.update_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Workflow {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Workflow();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.action = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.polygon_staking_parameters, () => message.polygon_staking_parameters = dependency_2.coinbase.staking.v1alpha1.PolygonStakingParameters.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.solana_staking_parameters, () => message.solana_staking_parameters = dependency_3.coinbase.staking.v1alpha1.SolanaStakingParameters.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.ethereum_kiln_staking_parameters, () => message.ethereum_kiln_staking_parameters = dependency_1.coinbase.staking.v1alpha1.EthereumKilnStakingParameters.deserialize(reader));
                        break;
                    case 4:
                        message.state = reader.readEnum();
                        break;
                    case 5:
                        message.current_step_id = reader.readInt32();
                        break;
                    case 6:
                        reader.readMessage(message.steps, () => pb_1.Message.addToRepeatedWrapperField(message, 6, WorkflowStep.deserialize(reader), WorkflowStep));
                        break;
                    case 7:
                        reader.readMessage(message.create_time, () => message.create_time = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.update_time, () => message.update_time = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Workflow {
            return Workflow.deserialize(bytes);
        }
    }
    export namespace Workflow {
        export enum State {
            STATE_UNSPECIFIED = 0,
            STATE_IN_PROGRESS = 1,
            STATE_WAITING_FOR_SIGNING = 2,
            STATE_COMPLETED = 3,
            STATE_FAILED = 4,
            STATE_CANCELING = 5,
            STATE_CANCELED = 6,
            STATE_CANCEL_FAILED = 7,
            STATE_FAILED_REFRESHABLE = 8
        }
    }
    export class CreateWorkflowRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            workflow?: Workflow;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("workflow" in data && data.workflow != undefined) {
                    this.workflow = data.workflow;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get workflow() {
            return pb_1.Message.getWrapperField(this, Workflow, 2) as Workflow;
        }
        set workflow(value: Workflow) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_workflow() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            parent?: string;
            workflow?: ReturnType<typeof Workflow.prototype.toObject>;
        }): CreateWorkflowRequest {
            const message = new CreateWorkflowRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.workflow != null) {
                message.workflow = Workflow.fromObject(data.workflow);
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                workflow?: ReturnType<typeof Workflow.prototype.toObject>;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.workflow != null) {
                data.workflow = this.workflow.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.has_workflow)
                writer.writeMessage(2, this.workflow, () => this.workflow.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWorkflowRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWorkflowRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.workflow, () => message.workflow = Workflow.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWorkflowRequest {
            return CreateWorkflowRequest.deserialize(bytes);
        }
    }
    export class GetWorkflowRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): GetWorkflowRequest {
            const message = new GetWorkflowRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetWorkflowRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetWorkflowRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetWorkflowRequest {
            return GetWorkflowRequest.deserialize(bytes);
        }
    }
    export class ListWorkflowsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            filter?: string;
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get filter() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set filter(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            parent?: string;
            filter?: string;
            page_size?: number;
            page_token?: string;
        }): ListWorkflowsRequest {
            const message = new ListWorkflowsRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.filter != null) {
                message.filter = data.filter;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                filter?: string;
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.filter != null) {
                data.filter = this.filter;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.filter.length)
                writer.writeString(2, this.filter);
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (this.page_token.length)
                writer.writeString(4, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorkflowsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorkflowsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        message.filter = reader.readString();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWorkflowsRequest {
            return ListWorkflowsRequest.deserialize(bytes);
        }
    }
    export class ListWorkflowsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            workflows?: Workflow[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("workflows" in data && data.workflows != undefined) {
                    this.workflows = data.workflows;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get workflows() {
            return pb_1.Message.getRepeatedWrapperField(this, Workflow, 1) as Workflow[];
        }
        set workflows(value: Workflow[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            workflows?: ReturnType<typeof Workflow.prototype.toObject>[];
            next_page_token?: string;
        }): ListWorkflowsResponse {
            const message = new ListWorkflowsResponse({});
            if (data.workflows != null) {
                message.workflows = data.workflows.map(item => Workflow.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                workflows?: ReturnType<typeof Workflow.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.workflows != null) {
                data.workflows = this.workflows.map((item: Workflow) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.workflows.length)
                writer.writeRepeatedMessage(1, this.workflows, (item: Workflow) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorkflowsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorkflowsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.workflows, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Workflow.deserialize(reader), Workflow));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWorkflowsResponse {
            return ListWorkflowsResponse.deserialize(bytes);
        }
    }
    export class PerformWorkflowStepRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            step?: number;
            signed_tx?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("step" in data && data.step != undefined) {
                    this.step = data.step;
                }
                if ("signed_tx" in data && data.signed_tx != undefined) {
                    this.signed_tx = data.signed_tx;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get step() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set step(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get signed_tx() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set signed_tx(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            step?: number;
            signed_tx?: string;
        }): PerformWorkflowStepRequest {
            const message = new PerformWorkflowStepRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.step != null) {
                message.step = data.step;
            }
            if (data.signed_tx != null) {
                message.signed_tx = data.signed_tx;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                step?: number;
                signed_tx?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.step != null) {
                data.step = this.step;
            }
            if (this.signed_tx != null) {
                data.signed_tx = this.signed_tx;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.step != 0)
                writer.writeInt32(2, this.step);
            if (this.signed_tx.length)
                writer.writeString(3, this.signed_tx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PerformWorkflowStepRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PerformWorkflowStepRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.step = reader.readInt32();
                        break;
                    case 3:
                        message.signed_tx = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PerformWorkflowStepRequest {
            return PerformWorkflowStepRequest.deserialize(bytes);
        }
    }
    export class RefreshWorkflowStepRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            step?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("step" in data && data.step != undefined) {
                    this.step = data.step;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get step() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set step(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            step?: number;
        }): RefreshWorkflowStepRequest {
            const message = new RefreshWorkflowStepRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.step != null) {
                message.step = data.step;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                step?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.step != null) {
                data.step = this.step;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.step != 0)
                writer.writeInt32(2, this.step);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshWorkflowStepRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshWorkflowStepRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.step = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshWorkflowStepRequest {
            return RefreshWorkflowStepRequest.deserialize(bytes);
        }
    }
}
