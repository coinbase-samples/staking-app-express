/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: coinbase/staking/v1alpha1/polygon.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/api/field_behavior";
import * as dependency_2 from "./../../../protoc-gen-openapiv2/options/annotations";
import * as dependency_3 from "./common";
import * as pb_1 from "google-protobuf";
export namespace coinbase.staking.v1alpha1 {
    export class PolygonStakeParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_address?: string;
            amount?: dependency_3.coinbase.staking.v1alpha1.Amount;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_3.coinbase.staking.v1alpha1.Amount, 3) as dependency_3.coinbase.staking.v1alpha1.Amount;
        }
        set amount(value: dependency_3.coinbase.staking.v1alpha1.Amount) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_address?: string;
            amount?: ReturnType<typeof dependency_3.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
        }): PolygonStakeParameters {
            const message = new PolygonStakeParameters({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.amount != null) {
                message.amount = dependency_3.coinbase.staking.v1alpha1.Amount.fromObject(data.amount);
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_address?: string;
                amount?: ReturnType<typeof dependency_3.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_address.length)
                writer.writeString(2, this.validator_address);
            if (this.has_amount)
                writer.writeMessage(3, this.amount, () => this.amount.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PolygonStakeParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PolygonStakeParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_address = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.amount, () => message.amount = dependency_3.coinbase.staking.v1alpha1.Amount.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PolygonStakeParameters {
            return PolygonStakeParameters.deserialize(bytes);
        }
    }
    export class PolygonUnstakeParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_address?: string;
            amount?: dependency_3.coinbase.staking.v1alpha1.Amount;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_3.coinbase.staking.v1alpha1.Amount, 3) as dependency_3.coinbase.staking.v1alpha1.Amount;
        }
        set amount(value: dependency_3.coinbase.staking.v1alpha1.Amount) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_address?: string;
            amount?: ReturnType<typeof dependency_3.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
        }): PolygonUnstakeParameters {
            const message = new PolygonUnstakeParameters({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.amount != null) {
                message.amount = dependency_3.coinbase.staking.v1alpha1.Amount.fromObject(data.amount);
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_address?: string;
                amount?: ReturnType<typeof dependency_3.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_address.length)
                writer.writeString(2, this.validator_address);
            if (this.has_amount)
                writer.writeMessage(3, this.amount, () => this.amount.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PolygonUnstakeParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PolygonUnstakeParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_address = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.amount, () => message.amount = dependency_3.coinbase.staking.v1alpha1.Amount.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PolygonUnstakeParameters {
            return PolygonUnstakeParameters.deserialize(bytes);
        }
    }
    export class PolygonRestakeParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_address?: string;
        }): PolygonRestakeParameters {
            const message = new PolygonRestakeParameters({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_address?: string;
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_address.length)
                writer.writeString(2, this.validator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PolygonRestakeParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PolygonRestakeParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PolygonRestakeParameters {
            return PolygonRestakeParameters.deserialize(bytes);
        }
    }
    export class PolygonClaimRewardsParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_address?: string;
        }): PolygonClaimRewardsParameters {
            const message = new PolygonClaimRewardsParameters({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_address?: string;
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_address.length)
                writer.writeString(2, this.validator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PolygonClaimRewardsParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PolygonClaimRewardsParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PolygonClaimRewardsParameters {
            return PolygonClaimRewardsParameters.deserialize(bytes);
        }
    }
    export class PolygonStakingParameters extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            stake_parameters?: PolygonStakeParameters;
            unstake_parameters?: never;
            restake_parameters?: never;
            claim_rewards_parameters?: never;
        } | {
            stake_parameters?: never;
            unstake_parameters?: PolygonUnstakeParameters;
            restake_parameters?: never;
            claim_rewards_parameters?: never;
        } | {
            stake_parameters?: never;
            unstake_parameters?: never;
            restake_parameters?: PolygonRestakeParameters;
            claim_rewards_parameters?: never;
        } | {
            stake_parameters?: never;
            unstake_parameters?: never;
            restake_parameters?: never;
            claim_rewards_parameters?: PolygonClaimRewardsParameters;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stake_parameters" in data && data.stake_parameters != undefined) {
                    this.stake_parameters = data.stake_parameters;
                }
                if ("unstake_parameters" in data && data.unstake_parameters != undefined) {
                    this.unstake_parameters = data.unstake_parameters;
                }
                if ("restake_parameters" in data && data.restake_parameters != undefined) {
                    this.restake_parameters = data.restake_parameters;
                }
                if ("claim_rewards_parameters" in data && data.claim_rewards_parameters != undefined) {
                    this.claim_rewards_parameters = data.claim_rewards_parameters;
                }
            }
        }
        get stake_parameters() {
            return pb_1.Message.getWrapperField(this, PolygonStakeParameters, 1) as PolygonStakeParameters;
        }
        set stake_parameters(value: PolygonStakeParameters) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_stake_parameters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get unstake_parameters() {
            return pb_1.Message.getWrapperField(this, PolygonUnstakeParameters, 2) as PolygonUnstakeParameters;
        }
        set unstake_parameters(value: PolygonUnstakeParameters) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_unstake_parameters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get restake_parameters() {
            return pb_1.Message.getWrapperField(this, PolygonRestakeParameters, 3) as PolygonRestakeParameters;
        }
        set restake_parameters(value: PolygonRestakeParameters) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_restake_parameters() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get claim_rewards_parameters() {
            return pb_1.Message.getWrapperField(this, PolygonClaimRewardsParameters, 4) as PolygonClaimRewardsParameters;
        }
        set claim_rewards_parameters(value: PolygonClaimRewardsParameters) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_claim_rewards_parameters() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get parameters() {
            const cases: {
                [index: number]: "none" | "stake_parameters" | "unstake_parameters" | "restake_parameters" | "claim_rewards_parameters";
            } = {
                0: "none",
                1: "stake_parameters",
                2: "unstake_parameters",
                3: "restake_parameters",
                4: "claim_rewards_parameters"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            stake_parameters?: ReturnType<typeof PolygonStakeParameters.prototype.toObject>;
            unstake_parameters?: ReturnType<typeof PolygonUnstakeParameters.prototype.toObject>;
            restake_parameters?: ReturnType<typeof PolygonRestakeParameters.prototype.toObject>;
            claim_rewards_parameters?: ReturnType<typeof PolygonClaimRewardsParameters.prototype.toObject>;
        }): PolygonStakingParameters {
            const message = new PolygonStakingParameters({});
            if (data.stake_parameters != null) {
                message.stake_parameters = PolygonStakeParameters.fromObject(data.stake_parameters);
            }
            if (data.unstake_parameters != null) {
                message.unstake_parameters = PolygonUnstakeParameters.fromObject(data.unstake_parameters);
            }
            if (data.restake_parameters != null) {
                message.restake_parameters = PolygonRestakeParameters.fromObject(data.restake_parameters);
            }
            if (data.claim_rewards_parameters != null) {
                message.claim_rewards_parameters = PolygonClaimRewardsParameters.fromObject(data.claim_rewards_parameters);
            }
            return message;
        }
        toObject() {
            const data: {
                stake_parameters?: ReturnType<typeof PolygonStakeParameters.prototype.toObject>;
                unstake_parameters?: ReturnType<typeof PolygonUnstakeParameters.prototype.toObject>;
                restake_parameters?: ReturnType<typeof PolygonRestakeParameters.prototype.toObject>;
                claim_rewards_parameters?: ReturnType<typeof PolygonClaimRewardsParameters.prototype.toObject>;
            } = {};
            if (this.stake_parameters != null) {
                data.stake_parameters = this.stake_parameters.toObject();
            }
            if (this.unstake_parameters != null) {
                data.unstake_parameters = this.unstake_parameters.toObject();
            }
            if (this.restake_parameters != null) {
                data.restake_parameters = this.restake_parameters.toObject();
            }
            if (this.claim_rewards_parameters != null) {
                data.claim_rewards_parameters = this.claim_rewards_parameters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stake_parameters)
                writer.writeMessage(1, this.stake_parameters, () => this.stake_parameters.serialize(writer));
            if (this.has_unstake_parameters)
                writer.writeMessage(2, this.unstake_parameters, () => this.unstake_parameters.serialize(writer));
            if (this.has_restake_parameters)
                writer.writeMessage(3, this.restake_parameters, () => this.restake_parameters.serialize(writer));
            if (this.has_claim_rewards_parameters)
                writer.writeMessage(4, this.claim_rewards_parameters, () => this.claim_rewards_parameters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PolygonStakingParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PolygonStakingParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stake_parameters, () => message.stake_parameters = PolygonStakeParameters.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.unstake_parameters, () => message.unstake_parameters = PolygonUnstakeParameters.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.restake_parameters, () => message.restake_parameters = PolygonRestakeParameters.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.claim_rewards_parameters, () => message.claim_rewards_parameters = PolygonClaimRewardsParameters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PolygonStakingParameters {
            return PolygonStakingParameters.deserialize(bytes);
        }
    }
}
