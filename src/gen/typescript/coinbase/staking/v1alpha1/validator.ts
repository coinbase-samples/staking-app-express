/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: coinbase/staking/v1alpha1/validator.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/api/field_behavior";
import * as dependency_2 from "./../../../google/api/resource";
import * as pb_1 from "google-protobuf";
export namespace coinbase.staking.v1alpha1 {
    export class Validator extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            validator_address?: string;
            commission_rate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("commission_rate" in data && data.commission_rate != undefined) {
                    this.commission_rate = data.commission_rate;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get commission_rate() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set commission_rate(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            validator_address?: string;
            commission_rate?: number;
        }): Validator {
            const message = new Validator({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.commission_rate != null) {
                message.commission_rate = data.commission_rate;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                validator_address?: string;
                commission_rate?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.commission_rate != null) {
                data.commission_rate = this.commission_rate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.validator_address.length)
                writer.writeString(2, this.validator_address);
            if (this.commission_rate != 0)
                writer.writeFloat(3, this.commission_rate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Validator {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Validator();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.validator_address = reader.readString();
                        break;
                    case 3:
                        message.commission_rate = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Validator {
            return Validator.deserialize(bytes);
        }
    }
    export class ListValidatorsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            parent?: string;
            page_size?: number;
            page_token?: string;
        }): ListValidatorsRequest {
            const message = new ListValidatorsRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (this.page_token.length)
                writer.writeString(3, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListValidatorsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListValidatorsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListValidatorsRequest {
            return ListValidatorsRequest.deserialize(bytes);
        }
    }
    export class ListValidatorsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validators?: Validator[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, Validator, 1) as Validator[];
        }
        set validators(value: Validator[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            validators?: ReturnType<typeof Validator.prototype.toObject>[];
            next_page_token?: string;
        }): ListValidatorsResponse {
            const message = new ListValidatorsResponse({});
            if (data.validators != null) {
                message.validators = data.validators.map(item => Validator.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                validators?: ReturnType<typeof Validator.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.validators != null) {
                data.validators = this.validators.map((item: Validator) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validators.length)
                writer.writeRepeatedMessage(1, this.validators, (item: Validator) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListValidatorsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListValidatorsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Validator.deserialize(reader), Validator));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListValidatorsResponse {
            return ListValidatorsResponse.deserialize(bytes);
        }
    }
}
