/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: coinbase/staking/v1alpha1/solana.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as dependency_2 from "./../../../google/api/field_behavior";
import * as dependency_3 from "./../../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace coinbase.staking.v1alpha1 {
    export class NonceOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: string;
            nonce_account?: string;
            nonce_authority?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("nonce_account" in data && data.nonce_account != undefined) {
                    this.nonce_account = data.nonce_account;
                }
                if ("nonce_authority" in data && data.nonce_authority != undefined) {
                    this.nonce_authority = data.nonce_authority;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce_account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nonce_account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nonce_authority() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set nonce_authority(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            nonce?: string;
            nonce_account?: string;
            nonce_authority?: string;
        }): NonceOptions {
            const message = new NonceOptions({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.nonce_account != null) {
                message.nonce_account = data.nonce_account;
            }
            if (data.nonce_authority != null) {
                message.nonce_authority = data.nonce_authority;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
                nonce_account?: string;
                nonce_authority?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.nonce_account != null) {
                data.nonce_account = this.nonce_account;
            }
            if (this.nonce_authority != null) {
                data.nonce_authority = this.nonce_authority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce.length)
                writer.writeString(1, this.nonce);
            if (this.nonce_account.length)
                writer.writeString(2, this.nonce_account);
            if (this.nonce_authority.length)
                writer.writeString(3, this.nonce_authority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NonceOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NonceOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    case 2:
                        message.nonce_account = reader.readString();
                        break;
                    case 3:
                        message.nonce_authority = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NonceOptions {
            return NonceOptions.deserialize(bytes);
        }
    }
    export class SolanaCreateStakeAccountParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stake_account_address?: string;
            from_address?: string;
            stake_authority?: string;
            withdraw_authority?: string;
            amount?: dependency_1.coinbase.staking.v1alpha1.Amount;
            nonce_options?: NonceOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stake_account_address" in data && data.stake_account_address != undefined) {
                    this.stake_account_address = data.stake_account_address;
                }
                if ("from_address" in data && data.from_address != undefined) {
                    this.from_address = data.from_address;
                }
                if ("stake_authority" in data && data.stake_authority != undefined) {
                    this.stake_authority = data.stake_authority;
                }
                if ("withdraw_authority" in data && data.withdraw_authority != undefined) {
                    this.withdraw_authority = data.withdraw_authority;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("nonce_options" in data && data.nonce_options != undefined) {
                    this.nonce_options = data.nonce_options;
                }
            }
        }
        get stake_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stake_account_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set from_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get stake_authority() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set stake_authority(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get withdraw_authority() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set withdraw_authority(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.coinbase.staking.v1alpha1.Amount, 5) as dependency_1.coinbase.staking.v1alpha1.Amount;
        }
        set amount(value: dependency_1.coinbase.staking.v1alpha1.Amount) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get nonce_options() {
            return pb_1.Message.getWrapperField(this, NonceOptions, 6) as NonceOptions;
        }
        set nonce_options(value: NonceOptions) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_nonce_options() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            stake_account_address?: string;
            from_address?: string;
            stake_authority?: string;
            withdraw_authority?: string;
            amount?: ReturnType<typeof dependency_1.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
            nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
        }): SolanaCreateStakeAccountParameters {
            const message = new SolanaCreateStakeAccountParameters({});
            if (data.stake_account_address != null) {
                message.stake_account_address = data.stake_account_address;
            }
            if (data.from_address != null) {
                message.from_address = data.from_address;
            }
            if (data.stake_authority != null) {
                message.stake_authority = data.stake_authority;
            }
            if (data.withdraw_authority != null) {
                message.withdraw_authority = data.withdraw_authority;
            }
            if (data.amount != null) {
                message.amount = dependency_1.coinbase.staking.v1alpha1.Amount.fromObject(data.amount);
            }
            if (data.nonce_options != null) {
                message.nonce_options = NonceOptions.fromObject(data.nonce_options);
            }
            return message;
        }
        toObject() {
            const data: {
                stake_account_address?: string;
                from_address?: string;
                stake_authority?: string;
                withdraw_authority?: string;
                amount?: ReturnType<typeof dependency_1.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
                nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
            } = {};
            if (this.stake_account_address != null) {
                data.stake_account_address = this.stake_account_address;
            }
            if (this.from_address != null) {
                data.from_address = this.from_address;
            }
            if (this.stake_authority != null) {
                data.stake_authority = this.stake_authority;
            }
            if (this.withdraw_authority != null) {
                data.withdraw_authority = this.withdraw_authority;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.nonce_options != null) {
                data.nonce_options = this.nonce_options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stake_account_address.length)
                writer.writeString(1, this.stake_account_address);
            if (this.from_address.length)
                writer.writeString(2, this.from_address);
            if (this.stake_authority.length)
                writer.writeString(3, this.stake_authority);
            if (this.withdraw_authority.length)
                writer.writeString(4, this.withdraw_authority);
            if (this.has_amount)
                writer.writeMessage(5, this.amount, () => this.amount.serialize(writer));
            if (this.has_nonce_options)
                writer.writeMessage(6, this.nonce_options, () => this.nonce_options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SolanaCreateStakeAccountParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SolanaCreateStakeAccountParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stake_account_address = reader.readString();
                        break;
                    case 2:
                        message.from_address = reader.readString();
                        break;
                    case 3:
                        message.stake_authority = reader.readString();
                        break;
                    case 4:
                        message.withdraw_authority = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.coinbase.staking.v1alpha1.Amount.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.nonce_options, () => message.nonce_options = NonceOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SolanaCreateStakeAccountParameters {
            return SolanaCreateStakeAccountParameters.deserialize(bytes);
        }
    }
    export class SolanaDelegateStakeParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stake_account_address?: string;
            vote_account_address?: string;
            stake_authority?: string;
            nonce_options?: NonceOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stake_account_address" in data && data.stake_account_address != undefined) {
                    this.stake_account_address = data.stake_account_address;
                }
                if ("vote_account_address" in data && data.vote_account_address != undefined) {
                    this.vote_account_address = data.vote_account_address;
                }
                if ("stake_authority" in data && data.stake_authority != undefined) {
                    this.stake_authority = data.stake_authority;
                }
                if ("nonce_options" in data && data.nonce_options != undefined) {
                    this.nonce_options = data.nonce_options;
                }
            }
        }
        get stake_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stake_account_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get vote_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set vote_account_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get stake_authority() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set stake_authority(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get nonce_options() {
            return pb_1.Message.getWrapperField(this, NonceOptions, 4) as NonceOptions;
        }
        set nonce_options(value: NonceOptions) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_nonce_options() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            stake_account_address?: string;
            vote_account_address?: string;
            stake_authority?: string;
            nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
        }): SolanaDelegateStakeParameters {
            const message = new SolanaDelegateStakeParameters({});
            if (data.stake_account_address != null) {
                message.stake_account_address = data.stake_account_address;
            }
            if (data.vote_account_address != null) {
                message.vote_account_address = data.vote_account_address;
            }
            if (data.stake_authority != null) {
                message.stake_authority = data.stake_authority;
            }
            if (data.nonce_options != null) {
                message.nonce_options = NonceOptions.fromObject(data.nonce_options);
            }
            return message;
        }
        toObject() {
            const data: {
                stake_account_address?: string;
                vote_account_address?: string;
                stake_authority?: string;
                nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
            } = {};
            if (this.stake_account_address != null) {
                data.stake_account_address = this.stake_account_address;
            }
            if (this.vote_account_address != null) {
                data.vote_account_address = this.vote_account_address;
            }
            if (this.stake_authority != null) {
                data.stake_authority = this.stake_authority;
            }
            if (this.nonce_options != null) {
                data.nonce_options = this.nonce_options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stake_account_address.length)
                writer.writeString(1, this.stake_account_address);
            if (this.vote_account_address.length)
                writer.writeString(2, this.vote_account_address);
            if (this.stake_authority.length)
                writer.writeString(3, this.stake_authority);
            if (this.has_nonce_options)
                writer.writeMessage(4, this.nonce_options, () => this.nonce_options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SolanaDelegateStakeParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SolanaDelegateStakeParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stake_account_address = reader.readString();
                        break;
                    case 2:
                        message.vote_account_address = reader.readString();
                        break;
                    case 3:
                        message.stake_authority = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.nonce_options, () => message.nonce_options = NonceOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SolanaDelegateStakeParameters {
            return SolanaDelegateStakeParameters.deserialize(bytes);
        }
    }
    export class SolanaDeactivateStakeParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stake_account_address?: string;
            stake_authority?: string;
            nonce_options?: NonceOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stake_account_address" in data && data.stake_account_address != undefined) {
                    this.stake_account_address = data.stake_account_address;
                }
                if ("stake_authority" in data && data.stake_authority != undefined) {
                    this.stake_authority = data.stake_authority;
                }
                if ("nonce_options" in data && data.nonce_options != undefined) {
                    this.nonce_options = data.nonce_options;
                }
            }
        }
        get stake_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stake_account_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get stake_authority() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set stake_authority(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nonce_options() {
            return pb_1.Message.getWrapperField(this, NonceOptions, 3) as NonceOptions;
        }
        set nonce_options(value: NonceOptions) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_nonce_options() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            stake_account_address?: string;
            stake_authority?: string;
            nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
        }): SolanaDeactivateStakeParameters {
            const message = new SolanaDeactivateStakeParameters({});
            if (data.stake_account_address != null) {
                message.stake_account_address = data.stake_account_address;
            }
            if (data.stake_authority != null) {
                message.stake_authority = data.stake_authority;
            }
            if (data.nonce_options != null) {
                message.nonce_options = NonceOptions.fromObject(data.nonce_options);
            }
            return message;
        }
        toObject() {
            const data: {
                stake_account_address?: string;
                stake_authority?: string;
                nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
            } = {};
            if (this.stake_account_address != null) {
                data.stake_account_address = this.stake_account_address;
            }
            if (this.stake_authority != null) {
                data.stake_authority = this.stake_authority;
            }
            if (this.nonce_options != null) {
                data.nonce_options = this.nonce_options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stake_account_address.length)
                writer.writeString(1, this.stake_account_address);
            if (this.stake_authority.length)
                writer.writeString(2, this.stake_authority);
            if (this.has_nonce_options)
                writer.writeMessage(3, this.nonce_options, () => this.nonce_options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SolanaDeactivateStakeParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SolanaDeactivateStakeParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stake_account_address = reader.readString();
                        break;
                    case 2:
                        message.stake_authority = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.nonce_options, () => message.nonce_options = NonceOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SolanaDeactivateStakeParameters {
            return SolanaDeactivateStakeParameters.deserialize(bytes);
        }
    }
    export class SolanaWithdrawStakeParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stake_account_address?: string;
            recipient_address?: string;
            withdraw_authority?: string;
            amount?: dependency_1.coinbase.staking.v1alpha1.Amount;
            nonce_options?: NonceOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stake_account_address" in data && data.stake_account_address != undefined) {
                    this.stake_account_address = data.stake_account_address;
                }
                if ("recipient_address" in data && data.recipient_address != undefined) {
                    this.recipient_address = data.recipient_address;
                }
                if ("withdraw_authority" in data && data.withdraw_authority != undefined) {
                    this.withdraw_authority = data.withdraw_authority;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("nonce_options" in data && data.nonce_options != undefined) {
                    this.nonce_options = data.nonce_options;
                }
            }
        }
        get stake_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stake_account_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get recipient_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set recipient_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get withdraw_authority() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set withdraw_authority(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.coinbase.staking.v1alpha1.Amount, 4) as dependency_1.coinbase.staking.v1alpha1.Amount;
        }
        set amount(value: dependency_1.coinbase.staking.v1alpha1.Amount) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get nonce_options() {
            return pb_1.Message.getWrapperField(this, NonceOptions, 5) as NonceOptions;
        }
        set nonce_options(value: NonceOptions) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_nonce_options() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            stake_account_address?: string;
            recipient_address?: string;
            withdraw_authority?: string;
            amount?: ReturnType<typeof dependency_1.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
            nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
        }): SolanaWithdrawStakeParameters {
            const message = new SolanaWithdrawStakeParameters({});
            if (data.stake_account_address != null) {
                message.stake_account_address = data.stake_account_address;
            }
            if (data.recipient_address != null) {
                message.recipient_address = data.recipient_address;
            }
            if (data.withdraw_authority != null) {
                message.withdraw_authority = data.withdraw_authority;
            }
            if (data.amount != null) {
                message.amount = dependency_1.coinbase.staking.v1alpha1.Amount.fromObject(data.amount);
            }
            if (data.nonce_options != null) {
                message.nonce_options = NonceOptions.fromObject(data.nonce_options);
            }
            return message;
        }
        toObject() {
            const data: {
                stake_account_address?: string;
                recipient_address?: string;
                withdraw_authority?: string;
                amount?: ReturnType<typeof dependency_1.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
                nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
            } = {};
            if (this.stake_account_address != null) {
                data.stake_account_address = this.stake_account_address;
            }
            if (this.recipient_address != null) {
                data.recipient_address = this.recipient_address;
            }
            if (this.withdraw_authority != null) {
                data.withdraw_authority = this.withdraw_authority;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.nonce_options != null) {
                data.nonce_options = this.nonce_options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stake_account_address.length)
                writer.writeString(1, this.stake_account_address);
            if (this.recipient_address.length)
                writer.writeString(2, this.recipient_address);
            if (this.withdraw_authority.length)
                writer.writeString(3, this.withdraw_authority);
            if (this.has_amount)
                writer.writeMessage(4, this.amount, () => this.amount.serialize(writer));
            if (this.has_nonce_options)
                writer.writeMessage(5, this.nonce_options, () => this.nonce_options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SolanaWithdrawStakeParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SolanaWithdrawStakeParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stake_account_address = reader.readString();
                        break;
                    case 2:
                        message.recipient_address = reader.readString();
                        break;
                    case 3:
                        message.withdraw_authority = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.coinbase.staking.v1alpha1.Amount.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.nonce_options, () => message.nonce_options = NonceOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SolanaWithdrawStakeParameters {
            return SolanaWithdrawStakeParameters.deserialize(bytes);
        }
    }
    export class SolanaSplitStakeParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stake_account_address?: string;
            new_stake_account_address?: string;
            stake_authority?: string;
            amount?: dependency_1.coinbase.staking.v1alpha1.Amount;
            nonce_options?: NonceOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stake_account_address" in data && data.stake_account_address != undefined) {
                    this.stake_account_address = data.stake_account_address;
                }
                if ("new_stake_account_address" in data && data.new_stake_account_address != undefined) {
                    this.new_stake_account_address = data.new_stake_account_address;
                }
                if ("stake_authority" in data && data.stake_authority != undefined) {
                    this.stake_authority = data.stake_authority;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("nonce_options" in data && data.nonce_options != undefined) {
                    this.nonce_options = data.nonce_options;
                }
            }
        }
        get stake_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stake_account_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_stake_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_stake_account_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get stake_authority() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set stake_authority(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getWrapperField(this, dependency_1.coinbase.staking.v1alpha1.Amount, 4) as dependency_1.coinbase.staking.v1alpha1.Amount;
        }
        set amount(value: dependency_1.coinbase.staking.v1alpha1.Amount) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get nonce_options() {
            return pb_1.Message.getWrapperField(this, NonceOptions, 5) as NonceOptions;
        }
        set nonce_options(value: NonceOptions) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_nonce_options() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            stake_account_address?: string;
            new_stake_account_address?: string;
            stake_authority?: string;
            amount?: ReturnType<typeof dependency_1.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
            nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
        }): SolanaSplitStakeParameters {
            const message = new SolanaSplitStakeParameters({});
            if (data.stake_account_address != null) {
                message.stake_account_address = data.stake_account_address;
            }
            if (data.new_stake_account_address != null) {
                message.new_stake_account_address = data.new_stake_account_address;
            }
            if (data.stake_authority != null) {
                message.stake_authority = data.stake_authority;
            }
            if (data.amount != null) {
                message.amount = dependency_1.coinbase.staking.v1alpha1.Amount.fromObject(data.amount);
            }
            if (data.nonce_options != null) {
                message.nonce_options = NonceOptions.fromObject(data.nonce_options);
            }
            return message;
        }
        toObject() {
            const data: {
                stake_account_address?: string;
                new_stake_account_address?: string;
                stake_authority?: string;
                amount?: ReturnType<typeof dependency_1.coinbase.staking.v1alpha1.Amount.prototype.toObject>;
                nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
            } = {};
            if (this.stake_account_address != null) {
                data.stake_account_address = this.stake_account_address;
            }
            if (this.new_stake_account_address != null) {
                data.new_stake_account_address = this.new_stake_account_address;
            }
            if (this.stake_authority != null) {
                data.stake_authority = this.stake_authority;
            }
            if (this.amount != null) {
                data.amount = this.amount.toObject();
            }
            if (this.nonce_options != null) {
                data.nonce_options = this.nonce_options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stake_account_address.length)
                writer.writeString(1, this.stake_account_address);
            if (this.new_stake_account_address.length)
                writer.writeString(2, this.new_stake_account_address);
            if (this.stake_authority.length)
                writer.writeString(3, this.stake_authority);
            if (this.has_amount)
                writer.writeMessage(4, this.amount, () => this.amount.serialize(writer));
            if (this.has_nonce_options)
                writer.writeMessage(5, this.nonce_options, () => this.nonce_options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SolanaSplitStakeParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SolanaSplitStakeParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stake_account_address = reader.readString();
                        break;
                    case 2:
                        message.new_stake_account_address = reader.readString();
                        break;
                    case 3:
                        message.stake_authority = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.amount, () => message.amount = dependency_1.coinbase.staking.v1alpha1.Amount.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.nonce_options, () => message.nonce_options = NonceOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SolanaSplitStakeParameters {
            return SolanaSplitStakeParameters.deserialize(bytes);
        }
    }
    export class SolanaMergeStakeParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stake_account_address?: string;
            source_stake_account_address?: string;
            stake_authority?: string;
            nonce_options?: NonceOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stake_account_address" in data && data.stake_account_address != undefined) {
                    this.stake_account_address = data.stake_account_address;
                }
                if ("source_stake_account_address" in data && data.source_stake_account_address != undefined) {
                    this.source_stake_account_address = data.source_stake_account_address;
                }
                if ("stake_authority" in data && data.stake_authority != undefined) {
                    this.stake_authority = data.stake_authority;
                }
                if ("nonce_options" in data && data.nonce_options != undefined) {
                    this.nonce_options = data.nonce_options;
                }
            }
        }
        get stake_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stake_account_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_stake_account_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set source_stake_account_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get stake_authority() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set stake_authority(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get nonce_options() {
            return pb_1.Message.getWrapperField(this, NonceOptions, 4) as NonceOptions;
        }
        set nonce_options(value: NonceOptions) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_nonce_options() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            stake_account_address?: string;
            source_stake_account_address?: string;
            stake_authority?: string;
            nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
        }): SolanaMergeStakeParameters {
            const message = new SolanaMergeStakeParameters({});
            if (data.stake_account_address != null) {
                message.stake_account_address = data.stake_account_address;
            }
            if (data.source_stake_account_address != null) {
                message.source_stake_account_address = data.source_stake_account_address;
            }
            if (data.stake_authority != null) {
                message.stake_authority = data.stake_authority;
            }
            if (data.nonce_options != null) {
                message.nonce_options = NonceOptions.fromObject(data.nonce_options);
            }
            return message;
        }
        toObject() {
            const data: {
                stake_account_address?: string;
                source_stake_account_address?: string;
                stake_authority?: string;
                nonce_options?: ReturnType<typeof NonceOptions.prototype.toObject>;
            } = {};
            if (this.stake_account_address != null) {
                data.stake_account_address = this.stake_account_address;
            }
            if (this.source_stake_account_address != null) {
                data.source_stake_account_address = this.source_stake_account_address;
            }
            if (this.stake_authority != null) {
                data.stake_authority = this.stake_authority;
            }
            if (this.nonce_options != null) {
                data.nonce_options = this.nonce_options.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stake_account_address.length)
                writer.writeString(1, this.stake_account_address);
            if (this.source_stake_account_address.length)
                writer.writeString(2, this.source_stake_account_address);
            if (this.stake_authority.length)
                writer.writeString(3, this.stake_authority);
            if (this.has_nonce_options)
                writer.writeMessage(4, this.nonce_options, () => this.nonce_options.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SolanaMergeStakeParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SolanaMergeStakeParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stake_account_address = reader.readString();
                        break;
                    case 2:
                        message.source_stake_account_address = reader.readString();
                        break;
                    case 3:
                        message.stake_authority = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.nonce_options, () => message.nonce_options = NonceOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SolanaMergeStakeParameters {
            return SolanaMergeStakeParameters.deserialize(bytes);
        }
    }
    export class SolanaStakingParameters extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({} & (({
            create_stake_parameters?: SolanaCreateStakeAccountParameters;
            delegate_stake_parameters?: never;
            deactivate_stake_parameters?: never;
            withdraw_stake_parameters?: never;
            split_stake_parameters?: never;
            merge_stake_parameters?: never;
        } | {
            create_stake_parameters?: never;
            delegate_stake_parameters?: SolanaDelegateStakeParameters;
            deactivate_stake_parameters?: never;
            withdraw_stake_parameters?: never;
            split_stake_parameters?: never;
            merge_stake_parameters?: never;
        } | {
            create_stake_parameters?: never;
            delegate_stake_parameters?: never;
            deactivate_stake_parameters?: SolanaDeactivateStakeParameters;
            withdraw_stake_parameters?: never;
            split_stake_parameters?: never;
            merge_stake_parameters?: never;
        } | {
            create_stake_parameters?: never;
            delegate_stake_parameters?: never;
            deactivate_stake_parameters?: never;
            withdraw_stake_parameters?: SolanaWithdrawStakeParameters;
            split_stake_parameters?: never;
            merge_stake_parameters?: never;
        } | {
            create_stake_parameters?: never;
            delegate_stake_parameters?: never;
            deactivate_stake_parameters?: never;
            withdraw_stake_parameters?: never;
            split_stake_parameters?: SolanaSplitStakeParameters;
            merge_stake_parameters?: never;
        } | {
            create_stake_parameters?: never;
            delegate_stake_parameters?: never;
            deactivate_stake_parameters?: never;
            withdraw_stake_parameters?: never;
            split_stake_parameters?: never;
            merge_stake_parameters?: SolanaMergeStakeParameters;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("create_stake_parameters" in data && data.create_stake_parameters != undefined) {
                    this.create_stake_parameters = data.create_stake_parameters;
                }
                if ("delegate_stake_parameters" in data && data.delegate_stake_parameters != undefined) {
                    this.delegate_stake_parameters = data.delegate_stake_parameters;
                }
                if ("deactivate_stake_parameters" in data && data.deactivate_stake_parameters != undefined) {
                    this.deactivate_stake_parameters = data.deactivate_stake_parameters;
                }
                if ("withdraw_stake_parameters" in data && data.withdraw_stake_parameters != undefined) {
                    this.withdraw_stake_parameters = data.withdraw_stake_parameters;
                }
                if ("split_stake_parameters" in data && data.split_stake_parameters != undefined) {
                    this.split_stake_parameters = data.split_stake_parameters;
                }
                if ("merge_stake_parameters" in data && data.merge_stake_parameters != undefined) {
                    this.merge_stake_parameters = data.merge_stake_parameters;
                }
            }
        }
        get create_stake_parameters() {
            return pb_1.Message.getWrapperField(this, SolanaCreateStakeAccountParameters, 1) as SolanaCreateStakeAccountParameters;
        }
        set create_stake_parameters(value: SolanaCreateStakeAccountParameters) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_create_stake_parameters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get delegate_stake_parameters() {
            return pb_1.Message.getWrapperField(this, SolanaDelegateStakeParameters, 2) as SolanaDelegateStakeParameters;
        }
        set delegate_stake_parameters(value: SolanaDelegateStakeParameters) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_delegate_stake_parameters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get deactivate_stake_parameters() {
            return pb_1.Message.getWrapperField(this, SolanaDeactivateStakeParameters, 3) as SolanaDeactivateStakeParameters;
        }
        set deactivate_stake_parameters(value: SolanaDeactivateStakeParameters) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_deactivate_stake_parameters() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get withdraw_stake_parameters() {
            return pb_1.Message.getWrapperField(this, SolanaWithdrawStakeParameters, 4) as SolanaWithdrawStakeParameters;
        }
        set withdraw_stake_parameters(value: SolanaWithdrawStakeParameters) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_withdraw_stake_parameters() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get split_stake_parameters() {
            return pb_1.Message.getWrapperField(this, SolanaSplitStakeParameters, 5) as SolanaSplitStakeParameters;
        }
        set split_stake_parameters(value: SolanaSplitStakeParameters) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_split_stake_parameters() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get merge_stake_parameters() {
            return pb_1.Message.getWrapperField(this, SolanaMergeStakeParameters, 6) as SolanaMergeStakeParameters;
        }
        set merge_stake_parameters(value: SolanaMergeStakeParameters) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_merge_stake_parameters() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get parameters() {
            const cases: {
                [index: number]: "none" | "create_stake_parameters" | "delegate_stake_parameters" | "deactivate_stake_parameters" | "withdraw_stake_parameters" | "split_stake_parameters" | "merge_stake_parameters";
            } = {
                0: "none",
                1: "create_stake_parameters",
                2: "delegate_stake_parameters",
                3: "deactivate_stake_parameters",
                4: "withdraw_stake_parameters",
                5: "split_stake_parameters",
                6: "merge_stake_parameters"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            create_stake_parameters?: ReturnType<typeof SolanaCreateStakeAccountParameters.prototype.toObject>;
            delegate_stake_parameters?: ReturnType<typeof SolanaDelegateStakeParameters.prototype.toObject>;
            deactivate_stake_parameters?: ReturnType<typeof SolanaDeactivateStakeParameters.prototype.toObject>;
            withdraw_stake_parameters?: ReturnType<typeof SolanaWithdrawStakeParameters.prototype.toObject>;
            split_stake_parameters?: ReturnType<typeof SolanaSplitStakeParameters.prototype.toObject>;
            merge_stake_parameters?: ReturnType<typeof SolanaMergeStakeParameters.prototype.toObject>;
        }): SolanaStakingParameters {
            const message = new SolanaStakingParameters({});
            if (data.create_stake_parameters != null) {
                message.create_stake_parameters = SolanaCreateStakeAccountParameters.fromObject(data.create_stake_parameters);
            }
            if (data.delegate_stake_parameters != null) {
                message.delegate_stake_parameters = SolanaDelegateStakeParameters.fromObject(data.delegate_stake_parameters);
            }
            if (data.deactivate_stake_parameters != null) {
                message.deactivate_stake_parameters = SolanaDeactivateStakeParameters.fromObject(data.deactivate_stake_parameters);
            }
            if (data.withdraw_stake_parameters != null) {
                message.withdraw_stake_parameters = SolanaWithdrawStakeParameters.fromObject(data.withdraw_stake_parameters);
            }
            if (data.split_stake_parameters != null) {
                message.split_stake_parameters = SolanaSplitStakeParameters.fromObject(data.split_stake_parameters);
            }
            if (data.merge_stake_parameters != null) {
                message.merge_stake_parameters = SolanaMergeStakeParameters.fromObject(data.merge_stake_parameters);
            }
            return message;
        }
        toObject() {
            const data: {
                create_stake_parameters?: ReturnType<typeof SolanaCreateStakeAccountParameters.prototype.toObject>;
                delegate_stake_parameters?: ReturnType<typeof SolanaDelegateStakeParameters.prototype.toObject>;
                deactivate_stake_parameters?: ReturnType<typeof SolanaDeactivateStakeParameters.prototype.toObject>;
                withdraw_stake_parameters?: ReturnType<typeof SolanaWithdrawStakeParameters.prototype.toObject>;
                split_stake_parameters?: ReturnType<typeof SolanaSplitStakeParameters.prototype.toObject>;
                merge_stake_parameters?: ReturnType<typeof SolanaMergeStakeParameters.prototype.toObject>;
            } = {};
            if (this.create_stake_parameters != null) {
                data.create_stake_parameters = this.create_stake_parameters.toObject();
            }
            if (this.delegate_stake_parameters != null) {
                data.delegate_stake_parameters = this.delegate_stake_parameters.toObject();
            }
            if (this.deactivate_stake_parameters != null) {
                data.deactivate_stake_parameters = this.deactivate_stake_parameters.toObject();
            }
            if (this.withdraw_stake_parameters != null) {
                data.withdraw_stake_parameters = this.withdraw_stake_parameters.toObject();
            }
            if (this.split_stake_parameters != null) {
                data.split_stake_parameters = this.split_stake_parameters.toObject();
            }
            if (this.merge_stake_parameters != null) {
                data.merge_stake_parameters = this.merge_stake_parameters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_create_stake_parameters)
                writer.writeMessage(1, this.create_stake_parameters, () => this.create_stake_parameters.serialize(writer));
            if (this.has_delegate_stake_parameters)
                writer.writeMessage(2, this.delegate_stake_parameters, () => this.delegate_stake_parameters.serialize(writer));
            if (this.has_deactivate_stake_parameters)
                writer.writeMessage(3, this.deactivate_stake_parameters, () => this.deactivate_stake_parameters.serialize(writer));
            if (this.has_withdraw_stake_parameters)
                writer.writeMessage(4, this.withdraw_stake_parameters, () => this.withdraw_stake_parameters.serialize(writer));
            if (this.has_split_stake_parameters)
                writer.writeMessage(5, this.split_stake_parameters, () => this.split_stake_parameters.serialize(writer));
            if (this.has_merge_stake_parameters)
                writer.writeMessage(6, this.merge_stake_parameters, () => this.merge_stake_parameters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SolanaStakingParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SolanaStakingParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.create_stake_parameters, () => message.create_stake_parameters = SolanaCreateStakeAccountParameters.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.delegate_stake_parameters, () => message.delegate_stake_parameters = SolanaDelegateStakeParameters.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.deactivate_stake_parameters, () => message.deactivate_stake_parameters = SolanaDeactivateStakeParameters.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.withdraw_stake_parameters, () => message.withdraw_stake_parameters = SolanaWithdrawStakeParameters.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.split_stake_parameters, () => message.split_stake_parameters = SolanaSplitStakeParameters.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.merge_stake_parameters, () => message.merge_stake_parameters = SolanaMergeStakeParameters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SolanaStakingParameters {
            return SolanaStakingParameters.deserialize(bytes);
        }
    }
}
