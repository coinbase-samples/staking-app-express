// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

// The details of a transaction being constructed and broadcasted to the network.
export type TxStepOutput = {
  // The unsigned transaction which was signed in order to be broadcasted
  //
  // Behaviors: OUTPUT_ONLY
  unsignedTx: string | undefined;
  // The signed transaction which was asked to be broadcasted
  //
  // Behaviors: OUTPUT_ONLY
  signedTx: string | undefined;
  // The hash of the broadcasted transaction.
  //
  // Behaviors: OUTPUT_ONLY
  txHash: string | undefined;
  // The state of the transaction step.
  //
  // Behaviors: OUTPUT_ONLY
  state: TxStepOutput_State | undefined;
};

// State defines an enumeration of states for a staking transaction
export type TxStepOutput_State =
  // Unspecified transaction state, this is for backwards compatibility.
  | "STATE_UNSPECIFIED"
  // Tx has not yet been constructed in the backend
  | "STATE_NOT_CONSTRUCTED"
  // Tx construction is over in the backend
  | "STATE_CONSTRUCTED"
  // Tx is waiting to be signed
  | "STATE_PENDING_SIGNING"
  // Tx has been signed and returned to the backend
  | "STATE_SIGNED"
  // Tx is being broadcasted to the network
  | "STATE_BROADCASTING"
  // Tx is waiting for confirmation
  | "STATE_CONFIRMING"
  // Tx has been confirmed to be included in a block
  | "STATE_CONFIRMED"
  // Tx has been finalized
  | "STATE_FINALIZED"
  // Tx construction or broadcasting failed
  | "STATE_FAILED"
  // Tx has been successfully executed
  | "STATE_SUCCESS"
  // Tx is being canceled
  | "STATE_CANCELING"
  // Tx has been canceled
  | "STATE_CANCELED"
  // Tx cancellation failed
  | "STATE_CANCEL_FAILED"
  // Tx failed but can be refreshed
  | "STATE_FAILED_REFRESHABLE"
  // Tx is being refreshed
  | "STATE_REFRESHING";
// The output details of a step where we wait for some kind of on-chain activity to finish like reaching a certain checkpoint, epoch or block
export type WaitStepOutput = {
  // The beginning of wait period.
  //
  // Behaviors: OUTPUT_ONLY
  start: number | undefined;
  // The current wait progress.
  //
  // Behaviors: OUTPUT_ONLY
  current: number | undefined;
  // The target wait end point.
  //
  // Behaviors: OUTPUT_ONLY
  target: number | undefined;
  // The wait unit (like checkpoint, block, epoch etc)
  //
  // Behaviors: OUTPUT_ONLY
  unit: WaitStepOutput_WaitUnit | undefined;
  // The state of the wait step.
  //
  // Behaviors: OUTPUT_ONLY
  state: WaitStepOutput_State | undefined;
};

// The unit of wait time
export type WaitStepOutput_WaitUnit =
  // Unspecified wait time
  | "WAIT_UNIT_UNSPECIFIED"
  // Wait time measured in seconds
  | "WAIT_UNIT_SECONDS"
  // Wait time measured in blocks
  | "WAIT_UNIT_BLOCKS"
  // Wait time measured in epochs
  | "WAIT_UNIT_EPOCHS"
  // Wait time measured in checkpoints
  | "WAIT_UNIT_CHECKPOINTS";
// WaitStepState defines an enumeration of states for a wait step
export type WaitStepOutput_State =
  // Unspecified wait step state
  | "STATE_UNSPECIFIED"
  // Wait step has not started
  | "STATE_NOT_STARTED"
  // Wait step is in-progress
  | "STATE_IN_PROGRESS"
  // Wait step completed
  | "STATE_COMPLETED";
// (-- api-linter: core::0123::resource-annotation=disabled
// aip.dev/not-precedent: We need to do this because
// it is only a sub resource --)
// The information for a step in the workflow
export type WorkflowStep = {
  // The human readable name of the step.
  //
  // Behaviors: OUTPUT_ONLY
  name: string | undefined;
  // The tx step output (i.e. transaction metadata such as unsigned tx, signed tx etc).
  //
  // Behaviors: OUTPUT_ONLY
  txStepOutput?: TxStepOutput;
  // The waiting details for any kind like how many checkpoints away for unbonding etc
  //
  // Behaviors: OUTPUT_ONLY
  waitStepOutput?: WaitStepOutput;
};

// A Workflow resource
export type Workflow = {
  // The resource name of the workflow.
  // Format: projects/{projectUUID}/workflows/{workflowUUID}
  // Ex: projects/ 123e4567-e89b-12d3-a456-426614174000/workflows/123e4567-e89b-12d3-a456-426614174000
  //
  // Behaviors: OUTPUT_ONLY
  name: string | undefined;
  // The resource name of the action being
  // performed.
  // Format: protocols/{protocol}/networks/{network}/actions/{action}
  //
  // Behaviors: REQUIRED
  action: string | undefined;
  // Polygon staking parameters
  //
  // Behaviors: REQUIRED
  polygonStakingParameters?: PolygonStakingParameters;
  // Solana staking parameters
  //
  // Behaviors: REQUIRED
  solanaStakingParameters?: SolanaStakingParameters;
  // EthereumKiln staking parameters
  //
  // Behaviors: REQUIRED
  ethereumKilnStakingParameters?: EthereumKilnStakingParameters;
  // The current state of the workflow
  //
  // Behaviors: OUTPUT_ONLY
  state: Workflow_State | undefined;
  // The index of the current step.
  //
  // Behaviors: OUTPUT_ONLY
  currentStepId: number | undefined;
  // The list of steps for this workflow.
  //
  // Behaviors: OUTPUT_ONLY
  steps: WorkflowStep[] | undefined;
  // The timestamp the workflow was created
  //
  // Behaviors: OUTPUT_ONLY
  createTime: wellKnownTimestamp | undefined;
  // The timestamp the workflow was last updated
  //
  // Behaviors: OUTPUT_ONLY
  updateTime: wellKnownTimestamp | undefined;
};

// The parameters needed for staking on Polygon
export type PolygonStakingParameters = {
  // The parameters for stake action on Polygon
  stakeParameters?: PolygonStakeParameters;
  // The parameters for unstake action on Polygon
  unstakeParameters?: PolygonUnstakeParameters;
  // The parameters for restake action on Polygon
  restakeParameters?: PolygonRestakeParameters;
  // The parameters for claim rewards action on Polygon
  claimRewardsParameters?: PolygonClaimRewardsParameters;
};

// The parameters required for stake action on Polygon
export type PolygonStakeParameters = {
  // The public address of the delegator you wish to
  // interact with.
  //
  // Behaviors: REQUIRED
  delegatorAddress: string | undefined;
  // The public address of the validator you wish to
  // perform the action to.
  //
  // Behaviors: REQUIRED
  validatorAddress: string | undefined;
  // The amount of the asset. For native assets or ERC-20 contracts, this is presented in terms of
  // atomic units (e.g., Wei for Ether) as a base-10 number.
  //
  // Behaviors: REQUIRED
  amount: Amount | undefined;
};

// The amount of a token you wish to perform an action
// with.
export type Amount = {
  // The total value of the token.
  value: string | undefined;
  // (-- api-linter: core::0143::standardized-codes=disabled
  // aip.dev/not-precedent: We need to do this because it is in active.
  // discussion --)
  // The name of the token.
  currency: string | undefined;
};

// (-- api-linter: core::0140::prepositions=disabled
// aip.dev/not-precedent: We need to do this because it simplifies the api. --)
// The parameters required for unstake action on Polygon
export type PolygonUnstakeParameters = {
  // The public address of the delegator you wish to
  // interact with.
  //
  // Behaviors: REQUIRED
  delegatorAddress: string | undefined;
  // The public address of the validator you wish to
  // perform the action to.
  //
  // Behaviors: REQUIRED
  validatorAddress: string | undefined;
  // The amount of the asset. For native assets or ERC-20 contracts, this is presented in terms of
  // atomic units (e.g., Wei for Ether) as a base-10 number.
  //
  // Behaviors: REQUIRED
  amount: Amount | undefined;
};

// (-- api-linter: core::0140::prepositions=disabled
// aip.dev/not-precedent: We need to do this because it simplifies the api. --)
// The parameters required for unstake action on Polygon
export type PolygonRestakeParameters = {
  // The public address of the delegator you wish to
  // interact with.
  //
  // Behaviors: REQUIRED
  delegatorAddress: string | undefined;
  // The public address of the validator you wish to
  // perform the action to.
  //
  // Behaviors: REQUIRED
  validatorAddress: string | undefined;
};

// (-- api-linter: core::0140::prepositions=disabled
// aip.dev/not-precedent: We need to do this because it simplifies the api. --)
// The parameters required for claim rewards action on Polygon
export type PolygonClaimRewardsParameters = {
  // The public address of the delegator you wish to
  // interact with.
  //
  // Behaviors: REQUIRED
  delegatorAddress: string | undefined;
  // The public address of the validator you wish to
  // perform the action to.
  //
  // Behaviors: REQUIRED
  validatorAddress: string | undefined;
};

// The parameters needed for staking on Solana
export type SolanaStakingParameters = {
  // The parameters for create stake account action on Solana.
  createStakeParameters?: SolanaCreateStakeAccountParameters;
  // The parameters for delegate stake action on Solana.
  delegateStakeParameters?: SolanaDelegateStakeParameters;
  // The parameters for deactivate stake action on Solana.
  deactivateStakeParameters?: SolanaDeactivateStakeParameters;
  // The parameters for withdraw stake action on Solana.
  withdrawStakeParameters?: SolanaWithdrawStakeParameters;
  // The parameters for split stake action on Solana.
  splitStakeParameters?: SolanaSplitStakeParameters;
  // The parameters for merge stake action on Solana.
  mergeStakeParameters?: SolanaMergeStakeParameters;
};

// The parameters required for the create stake account action on Solana.
export type SolanaCreateStakeAccountParameters = {
  // The address of the new stake account which will be created. This address must not already exist. Signs the transaction.
  //
  // Behaviors: REQUIRED
  stakeAccountAddress: string | undefined;
  // The address of the account which will fund the stake account. Pays the transaction fee. Signs the transaction.
  // (-- api-linter: core::0140::prepositions=disabled
  // aip.dev/not-precedent: We need to do this because it's not relevant to our use case. --)
  //
  // Behaviors: REQUIRED
  fromAddress: string | undefined;
  // The address of the account which will be granted signing authority over staking operations on the new stake account. If not provided, defaults to the from_address.
  //
  // Behaviors: OPTIONAL
  stakeAuthority: string | undefined;
  // The address of the account which will be granted signing authority over withdrawing inactive stake from the new stake account. If not provided, defaults to the from_address.
  //
  // Behaviors: OPTIONAL
  withdrawAuthority: string | undefined;
  // The amount to fund the stake account with, in Lamports.
  //
  // Behaviors: REQUIRED
  amount: Amount | undefined;
  // The parameters required to use a durable transaction nonce for Solana transactions.
  //
  // Behaviors: OPTIONAL
  nonceOptions: NonceOptions | undefined;
};

// The parameters required to use a durable transaction nonce for Solana transactions.
export type NonceOptions = {
  // The blockhash stored in the nonce account.
  nonce: string | undefined;
  // The address of the nonce account.
  nonceAccount: string | undefined;
  // The address of the nonce authority. If not provided, defaults to the nonce_account_address. Signs the transaction.
  nonceAuthority: string | undefined;
};

// The parameters required for the delegate stake action on Solana.
export type SolanaDelegateStakeParameters = {
  // The address of the stake account which will be delegating its stake.
  //
  // Behaviors: REQUIRED
  stakeAccountAddress: string | undefined;
  // The address of the validator's vote account to which the stake will be delegated.
  //
  // Behaviors: REQUIRED
  voteAccountAddress: string | undefined;
  // The address of the account which has signing authority over staking operations on the stake account. Signs the transaction.
  //
  // Behaviors: REQUIRED
  stakeAuthority: string | undefined;
  // The parameters required to use a durable transaction nonce for Solana transactions.
  //
  // Behaviors: OPTIONAL
  nonceOptions: NonceOptions | undefined;
};

// The parameters required for the deactivate stake action on Solana.
export type SolanaDeactivateStakeParameters = {
  // The address of the stake account which will have its stake deactivated. Stake must be currently active.
  //
  // Behaviors: REQUIRED
  stakeAccountAddress: string | undefined;
  // The address of the account which has signing authority over staking operations on the stake account. Signs the transaction.
  //
  // Behaviors: REQUIRED
  stakeAuthority: string | undefined;
  // The parameters required to use a durable transaction nonce for Solana transactions.
  //
  // Behaviors: OPTIONAL
  nonceOptions: NonceOptions | undefined;
};

// The parameters required for the withdraw stake action on Solana.
export type SolanaWithdrawStakeParameters = {
  // The address of the stake account from which stake will be withdrawn. Stake must be currently inactive.
  //
  // Behaviors: REQUIRED
  stakeAccountAddress: string | undefined;
  // The address of the recipient account which will receive the withdrawn stake.
  //
  // Behaviors: REQUIRED
  recipientAddress: string | undefined;
  // The address of the account which has signing authority over withdrawing inactive stake from the stake account. Signs the transaction.
  //
  // Behaviors: REQUIRED
  withdrawAuthority: string | undefined;
  // The amount to withdraw from the stake account, in Lamports.
  //
  // Behaviors: REQUIRED
  amount: Amount | undefined;
  // The parameters required to use a durable transaction nonce for Solana transactions.
  //
  // Behaviors: OPTIONAL
  nonceOptions: NonceOptions | undefined;
};

// The parameters required for split stake action on Solana.
export type SolanaSplitStakeParameters = {
  // The address of the stake account will be split and have its stake removed.
  //
  // Behaviors: REQUIRED
  stakeAccountAddress: string | undefined;
  // The address of the new stake account which will be created and have the stake added to it.
  //
  // Behaviors: REQUIRED
  newStakeAccountAddress: string | undefined;
  // The address of the account which has signing authority over staking operations on the stake account. Signs the transaction.
  //
  // Behaviors: REQUIRED
  stakeAuthority: string | undefined;
  // The amount of stake to split, in Lamports.
  //
  // Behaviors: REQUIRED
  amount: Amount | undefined;
  // The parameters required to use a durable transaction nonce for Solana transactions.
  //
  // Behaviors: OPTIONAL
  nonceOptions: NonceOptions | undefined;
};

// The parameters required for merge stake action on Solana.
export type SolanaMergeStakeParameters = {
  // The address of the stake account will be merged into and have stake added to it.
  //
  // Behaviors: REQUIRED
  stakeAccountAddress: string | undefined;
  // The address of the source stake account which will have no longer exist after the merge.
  //
  // Behaviors: REQUIRED
  sourceStakeAccountAddress: string | undefined;
  // The address of the account which has signing authority over staking operations on the stake account. Signs the transaction.
  //
  // Behaviors: REQUIRED
  stakeAuthority: string | undefined;
  // The parameters required to use a durable transaction nonce for Solana transactions.
  //
  // Behaviors: OPTIONAL
  nonceOptions: NonceOptions | undefined;
};

// The parameters needed for staking on Ethereum via Kiln.
export type EthereumKilnStakingParameters = {
  // The parameters for stake action on Ethereum Kiln.
  stakeParameters?: EthereumKilnStakeParameters;
  // The parameters for unstake action on Ethereum Kiln.
  unstakeParameters?: EthereumKilnUnstakeParameters;
};

// The parameters required for the stake action on Ethereum Kiln.
export type EthereumKilnStakeParameters = {
  // The address you wish to stake from.
  //
  // Behaviors: REQUIRED
  stakerAddress: string | undefined;
  // The address of the integrator contract
  //
  // Behaviors: REQUIRED
  integratorContractAddress: string | undefined;
  // The amount of Ethereum to stake in wei.
  //
  // Behaviors: REQUIRED
  amount: Amount | undefined;
};

// The parameters required for the unstake action on Ethereum Kiln.
export type EthereumKilnUnstakeParameters = {
  // The address you wish to unstake from.
  //
  // Behaviors: REQUIRED
  stakerAddress: string | undefined;
  // The address of the integrator contract
  //
  // Behaviors: REQUIRED
  integratorContractAddress: string | undefined;
  // The amount of Ethereum to unstake in wei.
  //
  // Behaviors: REQUIRED
  amount: Amount | undefined;
};

// The state of a workflow
// Example workflow states:
// IN_PROGRESS -> WAITING_FOR_SIGNING -> IN_PROGRESS -> COMPLETED
// .................................................|-> FAILED
// IN_PROGRESS -> WAITING_FOR_SIGNING -> CANCELING -> CANCELED
// ...............................................|-> CANCEL_FAILED
export type Workflow_State =
  // Unspecified workflow state, this is for backwards compatibility.
  | "STATE_UNSPECIFIED"
  // In Progress represents a workflow that is currently in progress.
  | "STATE_IN_PROGRESS"
  // Waiting for signing represents the workflow is waiting on the consumer to sign.
  | "STATE_WAITING_FOR_SIGNING"
  // Completed represents the workflow has completed.
  | "STATE_COMPLETED"
  // Failed represents the workflow has failed.
  | "STATE_FAILED"
  // Canceling represents the workflow is being canceled.
  | "STATE_CANCELING"
  // Canceled represents the workflow has been canceled.
  | "STATE_CANCELED"
  // Cancel failed represents the workflow failed to cancel.
  | "STATE_CANCEL_FAILED"
  // Failed refreshable represents the workflow failed but can be refreshed.
  | "STATE_FAILED_REFRESHABLE";
// Encoded using RFC 3339, where generated output will always be Z-normalized
// and uses 0, 3, 6 or 9 fractional digits.
// Offsets other than "Z" are also accepted.
type wellKnownTimestamp = string;

// The request message for CreateWorkflow.
// (-- api-linter: core::0133::request-id-field=disabled
// aip.dev/not-precedent: We currently do not support this. --)
export type CreateWorkflowRequest = {
  // The resource name of the parent that owns
  // the workflow.
  // Format: projects/{project}
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The workflow to create
  //
  // Behaviors: REQUIRED
  workflow: Workflow | undefined;
};

// The message for GetWorkflow.
export type GetWorkflowRequest = {
  // The resource name of the workflow.
  // Format: projects/{project}/workflows/{workflow}
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The message for ListWorkflows.
export type ListWorkflowsRequest = {
  // The resource name of the parent that owns
  // the collection of networks.
  // Format: projects/{project}
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // [AIP-160](https://google.aip.dev/160) filter
  // Supported fields:
  // - string delegator_address: "0x..."
  // - string validator_address: "0x..."
  // - string action: "stake", "unstake"
  // - string protocol: "polygon"
  // - string network: "testnet", "mainnet"
  // - string amount: "10000"
  // - string currency: "MATIC"
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
  // The maximum number of workflows to return. The service may
  // return fewer than this value.
  // If unspecified, 50 workflows will be returned.
  // The maximum value is 1000; values over 1000 will be floored to 1000.
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // A page token as part of the response of a previous call.
  // Provide this to retrieve the next page.
  // When paginating, all other parameters must match the previous
  // request to list resources.
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
};

// The response message for ListWorkflows.
export type ListWorkflowsResponse = {
  // The list of workflows.
  workflows: Workflow[] | undefined;
  // A token which can be provided as `page_token` to retrieve the next page.
  // If this field is omitted, there are no additional pages.
  nextPageToken: string | undefined;
};

// The request message for PerformWorkflowStep.
export type PerformWorkflowStepRequest = {
  // The resource name of the workflow.
  // Format: projects/{project}/workflows/{workflow}
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  // The index of the step to be performed.
  //
  // Behaviors: REQUIRED
  step: number | undefined;
  // The signed transaction to post to the network.
  //
  // Behaviors: REQUIRED
  signedTx: string | undefined;
};

// The request message for RefreshWorkflowStepRequest.
export type RefreshWorkflowStepRequest = {
  // The resource name of the workflow.
  // Format: projects/{project}/workflows/{workflow}
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  // The index of the step to be refreshed.
  //
  // Behaviors: REQUIRED
  step: number | undefined;
};


// @@protoc_insertion_point(typescript-http-eof)
