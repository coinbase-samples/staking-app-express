syntax = "proto3";

package coinbase.staking.v1alpha1;

option go_package = "github.cbhq.net/cloud/staking-client-library-go/gen/go/coinbase/staking/v1alpha1";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "coinbase/staking/v1alpha1/protocol.proto";
import "coinbase/staking/v1alpha1/network.proto";
import "coinbase/staking/v1alpha1/action.proto";
import "coinbase/staking/v1alpha1/validator.proto";
import "coinbase/staking/v1alpha1/workflow.proto";
import "coinbase/staking/v1alpha1/staking_context.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "api.developer.coinbase.com";
  base_path: "/staking";
  schemes: HTTPS
  consumes: "application/json";
  produces: "application/json";
  info: {
    title: "Coinbase Non-Custodial Staking API";
    description: "Staking Service is a non-custodial staking service that aims to support multiple protocols and actions on them.";
    version: "v1alpha1";
  };
  tags: [
    {
      name: "Protocol";
      description: "Protocols details";
    },
    {
      name: "Network";
      description: "Networks details";
    },
    {
      name: "Validator";
      description: "Validators details";
    },
    {
      name: "Action";
      description: "Actions details";
    },
    {
      name: "Workflow";
      description: "Workflow management details";
    }
  ];
};

// StakingService manages staking related resources such as protocols, networks, validators and workflows
// (-- api-linter: core::0121::resource-must-support-get=disabled
//     aip.dev/not-precedent: No plans to support GET on protocol, network, validator and action resources. --)
service StakingService {
  option (google.api.default_host) = "staking.coinbase.com";

  // List supported protocols
  rpc ListProtocols(ListProtocolsRequest) returns (ListProtocolsResponse) {
    option (google.api.http) = {
      get: "/api/v1alpha1/protocols"
    };

    option (google.api.method_signature) = "";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported protocols";
      description: "List supported protocols";
      operation_id: "listProtocols";
      tags: "Protocol";
      responses: {
        key: "200"
          value: {
          description: "OK";
        }
      }
    };

  };

  // List supported staking networks for a given protocol
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse) {
    option (google.api.http) = {
      get: "/api/v1alpha1/{parent=protocols/*}/networks"
    };

    option (google.api.method_signature) = "parent";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported networks";
      description: "List supported networks";
      operation_id: "listNetworks";
      tags: "Network";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // List supported validators for a given protocol and network
  rpc ListValidators(ListValidatorsRequest) returns (ListValidatorsResponse) {
    option (google.api.http) = {
      get: "/api/v1alpha1/{parent=protocols/*/networks/*}/validators"
    };

    option (google.api.method_signature) = "parent";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported validators";
      description: "List supported validators";
      operation_id: "listValidators";
      tags: "Validator";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // List supported actions for a given protocol and network
  rpc ListActions(ListActionsRequest) returns (ListActionsResponse) {
    option (google.api.http) = {
      get: "/api/v1alpha1/{parent=protocols/*/networks/*}/actions"
    };

    option (google.api.method_signature) = "parent";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported actions";
      description: "List supported actions";
      operation_id: "listActions";
      tags: "Action";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // Create a workflow to perform an action
  rpc CreateWorkflow(CreateWorkflowRequest) returns (Workflow) {
    option (google.api.method_signature) = "parent,workflow";

    option (google.api.http) = {
      post: "/api/v1alpha1/{parent=projects/*}/workflows"
      body: "workflow"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create workflow";
      operation_id: "createWorkflow";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // Get the current state of an active workflow
  rpc GetWorkflow(GetWorkflowRequest) returns (Workflow) {
    option (google.api.http) = {
      get: "/api/v1alpha1/{name=projects/*/workflows/*}"
    };

    option (google.api.method_signature) = "name";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get workflow";
      operation_id: "getWorkflow";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // List all workflows in a project
  rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse) {
    option (google.api.http) = {
      get: "/api/v1alpha1/{parent=projects/*}/workflows"
    };

    option (google.api.method_signature) = "parent";

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List supported workflows";
      operation_id: "listWorkflows";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // (-- api-linter: core::0136::http-name-variable=disabled
  //     aip.dev/not-precedent: We need to do this because
  //     the phrasing reads easier. --)
  //
  // Perform the next step in a workflow
  rpc PerformWorkflowStep(PerformWorkflowStepRequest) returns (Workflow) {
    option (google.api.http) = {
      post: "/api/v1alpha1/{name=projects/*/workflows/*}/step"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Perform the next step in a workflow";
      description: "Perform the next step in a workflow";
      operation_id: "updateWorkflow";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };


  // (-- api-linter: core::0136::http-name-variable=disabled
  //     aip.dev/not-precedent: We need to do this because
  //     the phrasing reads easier. --)
  //
  // Refresh the current step in a workflow
  rpc RefreshWorkflowStep(RefreshWorkflowStepRequest) returns (Workflow) {
    option (google.api.http) = {
      post: "/api/v1alpha1/{name=projects/*/workflows/*}/refresh"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh the current step in a workflow";
      description: "Refresh the current step in a workflow";
      operation_id: "refreshWorkflow";
      tags: "Workflow";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };

  };

  // (-- api-linter: core::0136::http-name-variable=disabled
  //     aip.dev/not-precedent: We need to do this because
  //     the phrasing reads easier. --)
  //
  // View Staking context information given a specific network address
  rpc ViewStakingContext(ViewStakingContextRequest) returns (ViewStakingContextResponse) {
    option (google.api.http) = {
      get: "/api/v1alpha1/viewStakingContext:view"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns point-in-time context of staking data for an address";
      description: "Returns point-in-time context of staking data for an address";
      operation_id: "ViewStakingContext";
      tags: "StakingContext";
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      }
    };
  };
}

